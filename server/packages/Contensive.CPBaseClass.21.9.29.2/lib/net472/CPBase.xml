<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CPBase</name>
    </assembly>
    <members>
        <member name="T:Contensive.BaseClasses.AddonBaseClass">
             <summary>
             The base class for all Contensive add-ons.
             </summary>
             <remarks>
             This is a sample addon created from the AddonBaseClass. To use this add-on, Start a new project and reference CPBase in your Contensive installation.
             Paste this code into a HelloWorld Class and build the DLL.
             Copy the DLL into the Contensive\Addon folder.
             Create a new collection on your site and name it Samples. (Manage Add-ons >> Advanced >> click on collections )
             Create a new Addon on your site, name it Hello World, set the Samples collection and set the Dot Net Class name to Contensive.Addons.HelloWorldClass
             Open the Navigator to Manage Add-ons >> Samples >> and click on Hello World
             
            <code >
             Namespace Contensive.Addons
             '
             'Hello World
             '
             Public Class HelloWorldClass
                 Inherits BaseClasses.AddonBaseClass
                 Public Overrides Function Execute(ByVal CP As Contensive.BaseClasses.CPBaseClass) As Object
                     Return "Hello World 2"
                 End Function
            End Class
            End Namespace
              </code>
             </remarks>
        </member>
        <member name="M:Contensive.BaseClasses.AddonBaseClass.Execute(Contensive.BaseClasses.CPBaseClass)">
            <summary>
            The only exposed method of an addon. Performs the functions for this part of the the add-on and returns an object, typically a string. For add-ons executing on a web page or as a remove method, the returned string is added to the page where the addon is placed. For addons run as processes, the returned string is logged in the process log.
            </summary>
            <param name="CP">An instance of the CPBaseClass with a valid CP.MyAddon object pointing to the current addon parameters (values for this addon in the database)</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Contensive.BaseClasses.AdminUI.ListReportBaseClass">
            <summary>
            A tabular list of data rows with filters on the left.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ListReportBaseClass.IsOuterContainer">
            <summary>
            Set true if this tool is requested directly and not embedded in another AdminUI form
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ListReportBaseClass.reportRowLimit">
            <summary>
            Add padding around the body
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ListReportBaseClass.IncludeBodyPadding">
            <summary>
            Add padding around the body
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ListReportBaseClass.IncludeBodyColor">
            <summary>
            Add background color to the body
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ListReportBaseClass.GetHtml(Contensive.BaseClasses.CPBaseClass)">
            <summary>
            Method retrieves the rendered html. Call this method after populating all object elements
            </summary>
            <param name="cp"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ListReportBaseClass.HtmlLeftOfTable">
            <summary>
            use this area for optional filters
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ListReportBaseClass.HtmlBeforeTable">
            <summary>
            optional html before the table
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ListReportBaseClass.HtmlAfterTable">
            <summary>
            optional html after the table
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ListReportBaseClass.AddFormHidden(System.String,System.String)">
            <summary>
            Add hidden form input
            </summary>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ListReportBaseClass.AddFormHidden(System.String,System.Int32)">
            <summary>
            Add hidden form input
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ListReportBaseClass.AddFormHidden(System.String,System.Double)">
            <summary>
            Add hidden form input
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ListReportBaseClass.AddFormHidden(System.String,System.DateTime)">
            <summary>
            Add hidden form input
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ListReportBaseClass.AddFormHidden(System.String,System.Boolean)">
            <summary>
            Add hidden form input
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ListReportBaseClass.AddFormButton(System.String)">
            <summary>
            Add form button
            </summary>
            <param name="buttonValue"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ListReportBaseClass.AddFormButton(System.String,System.String)">
            <summary>
            Add form button
            </summary>
            <param name="buttonValue"></param>
            <param name="buttonName"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ListReportBaseClass.AddFormButton(System.String,System.String,System.String)">
            <summary>
            Add form button
            </summary>
            <param name="buttonValue"></param>
            <param name="buttonName"></param>
            <param name="buttonId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ListReportBaseClass.AddFormButton(System.String,System.String,System.String,System.String)">
            <summary>
            Add form button
            </summary>
            <param name="buttonValue"></param>
            <param name="buttonName"></param>
            <param name="buttonId"></param>
            <param name="buttonClass"></param>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ListReportBaseClass.FormActionQueryString">
            <summary>
            This report will be wrapped in a form tag and the action should send traffic back to the same page. If empty, the form uses cp.Doc.RefreshQueryString
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ListReportBaseClass.FormId">
            <summary>
            
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.AdminUI.ToolFormBaseClass">
            <summary>
            Create a Tool Form. Tool Forms how rows of input elements
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.IncludeBodyPadding">
            <summary>
            Add padding around the body
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.IncludeBodyColor">
            <summary>
            Add background color to the body
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.IsOuterContainer">
            <summary>
            Set true if this tool is requested directly and not embedded in another AdminUI form
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.Title">
            <summary>
            The title of the form
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.SuccessMessage">
            <summary>
            When an action is requested, use this position to inform success
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.InfoMessage">
            <summary>
            When an action is requested, use this position to inform info
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.WarningMessage">
            <summary>
            When an action is requested, use this position to inform warn
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.FailMessage">
            <summary>
            When an action is requested, use this position to inform error
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.Description">
            <summary>
            Description appears right below title
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.GetHtml(Contensive.BaseClasses.CPBaseClass)">
            <summary>
            Method retrieves the rendered html. Call this method after populating all object elements
            </summary>
            <param name="cp"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.AddFormHidden(System.String,System.String)">
            <summary>
            Add hidden form input
            </summary>
            <param name="Name"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.AddFormHidden(System.String,System.Int32)">
            <summary>
            Add hidden form input
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.AddFormHidden(System.String,System.Double)">
            <summary>
            Add hidden form input
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.AddFormHidden(System.String,System.DateTime)">
            <summary>
            Add hidden form input
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.AddFormHidden(System.String,System.Boolean)">
            <summary>
            Add hidden form input
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.AddFormButton(System.String)">
            <summary>
            Add form button
            </summary>
            <param name="buttonValue"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.AddFormButton(System.String,System.String)">
            <summary>
            Add form button
            </summary>
            <param name="buttonValue"></param>
            <param name="buttonName"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.AddFormButton(System.String,System.String,System.String)">
            <summary>
            Add form button
            </summary>
            <param name="buttonValue"></param>
            <param name="buttonName"></param>
            <param name="buttonId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.AddFormButton(System.String,System.String,System.String,System.String)">
            <summary>
            Add form button
            </summary>
            <param name="buttonValue"></param>
            <param name="buttonName"></param>
            <param name="buttonId"></param>
            <param name="buttonClass"></param>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.FormActionQueryString">
            <summary>
            This report will be wrapped in a form tag and the action should send traffic back to the same page. If empty, the form uses cp.Doc.RefreshQueryString
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.FormId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.Body">
            <summary>
            The main html of the tool form
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.AdminUI.ToolFormBaseClass.Footer">
            <summary>
            html block below the body
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPAddonBaseClass">
            <summary>
            CP.Addon - The Addon class represents the instance of an add-on. To use this class, use its constructor and open an cpcore.addon. 
            Use these properties to retrieve it's configuration
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.Execute(System.String)">
            <summary>
            Execute an addon in the default addon environment (type=simple, etc) and returns its resulting object. Generally addons return strings.
            </summary>
            <param name="addonGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.Execute(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Execute an addon in the default addon environment (type=simple, etc) and returns its resulting object. Generally addons return strings. Pass arguments to the addon that can be read with cp.doc.get() methods.
            </summary>
            <param name="addonGuid">The guid of the addon to be executed.</param>
            <param name="argumentKeyValuePairs">The executing addon can read these arguments with methods like cp.doc.getText("key").</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.Execute(System.String,Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext)">
            <summary>
            Execute an addon in the default addon environment (type=simple, etc) and returns its resulting object. Generally addons return strings. Provide details for the execution environment, such as argument key value pairs.
            </summary>
            <param name="addonGuid">The guid of the addon to be executed.</param>
            <param name="executeContext">The context where the addon is being executed (on a page, in an email, etc.). Typical is 'Simple' which blocks html comments.</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.Execute(System.Int32)">
            <summary>
            Execute an addon in the default addon environment (type=simple, etc) and returns its resulting object. Generally addons return strings.
            </summary>
            <param name="addonId">The id of the addon to be executed.</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.Execute(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Execute an addon in the default addon environment (type=simple, etc) and returns its resulting object. Generally addons return strings. Pass arguments to the addon that can be read with cp.doc.get() methods.
            </summary>
            <param name="addonId">The id of the addon to be executed.</param>
            <param name="argumentKeyValuePairs">The executing addon can read these arguments with methods like cp.doc.getText("key").</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.Execute(System.Int32,Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext)">
            <summary>
            Execute an addon in the default addon environment (type=simple, etc) and returns its resulting object. Generally addons return strings. Provide details for the execution environment, such as argument key value pairs.
            </summary>
            <param name="addonId">The id of the addon to be executed.</param>
            <param name="executeContext">The context where the addon is being executed (on a page, in an email, etc.). Typical is 'Simple' which blocks html comments.</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.ExecuteByUniqueName(System.String)">
            <summary>
            Execute an addon in the default addon environment (type=simple, etc) and returns its resulting object. Generally addons return strings.
            </summary>
            <param name="addonName">The name of the addon to be executed.</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.ExecuteByUniqueName(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Execute an addon in the default addon environment (type=simple, etc) and returns its resulting object. Generally addons return strings. Pass arguments to the addon that can be read with cp.doc.get() methods.
            </summary>
            <param name="addonName">The name of the addon to be executed.</param>
            <param name="argumentKeyValuePairs">The executing addon can read these arguments with methods like cp.doc.getText("key").</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.ExecuteByUniqueName(System.String,Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext)">
            <summary>
            Execute an addon in the default addon environment (type=simple, etc) and returns its resulting object. Generally addons return strings. Provide details for the execution environment, such as argument key value pairs.
            </summary>
            <param name="addonName">The name of the addon to be executed.</param>
            <param name="executeContext">The executing addon can read these arguments with methods like cp.doc.getText("key").</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.ExecuteAsProcessByUniqueName(System.String)">
            <summary>
            Execute an addon in a background process with the current session environment.
            </summary>
            <param name="addonName">The name of the addon to be executed.</param>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.ExecuteAsProcessByUniqueName(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Execute an addon in a background process with the current session environment. Arguments can be passed that the addon can read with cp.doc.get methods.
            </summary>
            <param name="addonName">The name of the addon to be executed.</param>
            <param name="argumentKeyValuePairs">The executing addon can read these arguments with methods like cp.doc.getText("key").</param>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.ExecuteAsProcess(System.String)">
            <summary>
            Execute an addon in a background process with the current session environment.
            </summary>
            <param name="addonGuid">The guid of the addon to be executed.</param>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.ExecuteAsProcess(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Execute an addon in a background process with the current session environment. Arguments can be passed that the addon can read with cp.doc.get methods.
            </summary>
            <param name="addonGuid">The guid of the addon to be executed.</param>
            <param name="argumentKeyValuePairs">The executing addon can read these arguments with methods like cp.doc.getText("key").</param>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.ExecuteAsProcess(System.Int32)">
            <summary>
            Execute an addon in a background process with the current session environment.
            </summary>
            <param name="addonid">The id of the addon to be executed.</param>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.ExecuteAsProcess(System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Execute an addon in a background process with the current session environment. Arguments can be passed that the addon can read with cp.doc.get methods.
            </summary>
            <param name="addonid">The id of the addon to be executed.</param>
            <param name="argumentKeyValuePairs"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.InstallCollectionFile(System.String,System.String@)">
            <summary>
            Install addon collection from a file in private files
            </summary>
            <param name="tempPathFilename">The path and filename in the tempFiles store. A path starts with the folder name and ends with a slash (like myfolder\subfolder\)</param>
            <param name="returnUserError">If the installation is successful, this returns string.empty.</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.InstallCollectionFileAsync(System.String)">
            <summary>
            Install addon collection from a file in private files
            </summary>
            <param name="tempPathFilename">The path and filename in the tempFiles store. A path starts with the folder name and ends with a slash (like myfolder\subfolder\)</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.InstallCollectionsFromFolder(System.String,System.Boolean,System.String@)">
            <summary>
            Install addon collection by its guid from the addon collection library
            </summary>
            <param name="tempFolder">The path and filename in the tempFiles store. A path starts with the folder name and ends with a slash (like myfolder\subfolder\)</param>
            <param name="deleteFolderWhenDone">Delete the temp folder when it is no longer needed.</param>
            <param name="returnUserError">If the installation is successful, this returns string.empty.</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.InstallCollectionsFromFolderAsync(System.String,System.Boolean)">
            <summary>
            Install addon collection by its guid from the addon collection library
            </summary>
            <param name="tempFolder">The path and filename in the tempFiles store. A path starts with the folder name and ends with a slash (like myfolder\subfolder\)</param>
            <param name="deleteFolderWhenDone">Delete the temp folder when it is no longer needed.</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.InstallCollectionFromLibrary(System.String,System.String@)">
            <summary>
            Install addon collection by its guid from the addon collection library
            </summary>
            <param name="collectionGuid">The guid of the collection to be installed.</param>
            <param name="returnUserError">If the installation is successful, this returns string.empty.</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.InstallCollectionFromLibraryAsync(System.String)">
            <summary>
            Install addon collection by its guid from the addon collection library
            </summary>
            <param name="collectionGuid">The guid of the collection to be installed.</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.InstallCollectionFromLink(System.String,System.String@)">
            <summary>
            Install addon collection from a link. This link should download a collection zip or xml file when requested.
            </summary>
            <param name="collectionFileLink">This link should download a collection zip or xml file when requested.</param>
            <param name="returnUserError">If the installation is successful, this returns string.empty.</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.InstallCollectionFromLinkAsync(System.String)">
            <summary>
            Install addon collection by its guid from the addon collection library.
            </summary>
            <param name="collectionFileLink">This link should download a collection zip or xml file when requested.</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.ExportCollection(System.Int32,System.String@,System.String@)">
            <summary>
            Package a collection into a collection zip file and return a path to the zip file in the cdnFiles store.
            </summary>
            <param name="collectionId">The id of the collection to be exported.</param>
            <param name="collectionZipCdnPathFilename">A path in the cdnFiles store. (ex myfolder\subfolder\)</param>
            <param name="returnUserError">If the export is successful, this returns string.empty.</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAddonBaseClass.ExportCollection(System.String,System.String@,System.String@)">
            <summary>
            Package a collection into a collection zip file and return a path to the zip file in the cdnFiles store.
            </summary>
            <param name="collectionGuid">The guid of the collection to be exported.</param>
            <param name="collectionZipCdnPathFilename">A path in the cdnFiles store. (ex myfolder\subfolder\)</param>
            <param name="returnUserError">If the export is successful, this returns string.empty.</param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.ID">
            <summary>
            The id of the addon currently executing.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.ccGuid">
            <summary>
            The guid of the addon currently executing.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.Admin">
            <summary>
            When true, this add-on is displayed on and can be used from the admin navigator.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.ArgumentList">
            <summary>
            A crlf delimited list of name=value pairs. These pairs create an options dialog available to administrators in advance edit mode. When the addon is executed, the values selected are available through the cp.doc.var("name") method.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.AsAjax">
            <summary>
            When true, this addon returns the javascript code necessary to implement this object as ajax.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.BlockDefaultStyles">
            <summary>
            When true, the system only uses the custom styles field when building the page. This field is not updated with add-on updates.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.CollectionID">
            <summary>
            The ID local to this site of the collection which installed this cpcore.addon.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.Content">
            <summary>
            When true, this addon can be placed in the content of pages.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.Copy">
            <summary>
            text copy is added to the addon content during execution.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.CopyText">
            <summary>
            text copy is added to the addon content during execution.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.CustomStyles">
            <summary>
            Styles that are rendered on the page when the addon is executed. Custom styles are editable and are not modified when the add-on is updated.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.DefaultStyles">
            <summary>
            Styles that are included with the add-on and are updated when the add-on is updated. See BlockdefaultStyles to block these.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.Description">
            <summary>
            The add-on description is displayed in the addon manager
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.DotNetClass">
            <summary>
            When present, the system calls the execute method of an objected created from this dot net class namespace.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.FormXML">
            <summary>
            This is an xml stucture that the system executes to create an admin form. See the support.contensive.com site for more details.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.Help">
            <summary>
            This copy is displayed when the help icon for this addon is clicked.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.HelpLink">
            <summary>
            If present, this link is displayed when the addon icon is clicked.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.IconFilename">
            <summary>
            When present, this icon will be used when the add-on is displayed in the addon manager and when edited. The height, width and sprites must also be set.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.IconHeight">
            <summary>
            The height in pixels of the icon referenced by the iconfilename.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.IconSprites">
            <summary>
            The number of images in the icon. There can be multiple images stacked top-to-bottom in the file. The first is the normal image. the second is the hover-over image. The third is the clicked image.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.IconWidth">
            <summary>
            The width of the icon referenced by the iconfilename
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.InFrame">
            <summary>
            When true, this addon will be displayed in an html iframe.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.IsInline">
            <summary>
            When true, the system will assume the addon returns html that is inline, as opposed to block. This is used to vary the edit icon behaviour.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.JavaScriptBodyEnd">
            <summary>
            Javascript code that will be placed in the document right before the end-body tag. Do not include script tags.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.JavascriptInHead">
            <summary>
            Javascript code that will be placed in the head of the document. Do no include script tags.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.JavaScriptOnLoad">
            <summary>
            Javascript that will be executed in the documents onload event.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.Link">
            <summary>
            A URL to a webserver that returns javascript. This URL will be added as the src attribute of a script tag, and placed in the content where this Add-on is inserted. This URL can be to any server-side program on any server, provided it returns javascript.
            For instance, if you have a script page that returns javascript,put the URL of that page here. The addon can be dropped on any page and will execute the script. Your script can be from any site. This technique is used in widgets and avoids the security issues with ajaxing from another site.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.MetaDescription">
            <summary>
            Text here will be added to the meta description section of the document head.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.MetaKeywordList">
            <summary>
            This is a comma or crlf delimited list of phrases that will be added to the document's meta keyword list
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.Name">
            <summary>
            The name of the cpcore.addon.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.NavIconType">
            <summary>
            The type of navigator entry to be made. Choices are: Add-on,Report,Setting,Tool
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.ObjectProgramID">
            <summary>
            If present, this string will be used as an activex programid to create an object and call it's execute method.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.OnBodyEnd">
            <summary>
            If true, this addon will be execute at the end of every page and its content added to right before the end-body tag
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.OnBodyStart">
            <summary>
            If true, this addon will be execute at the start of every page and it's content added to right after the body tag
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.OnContentEnd">
            <summary>
            if true, this add-on will be executed on every page and its content added right after the content box.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.OnContentStart">
            <summary>
            If true, this add-on will be executed on every page and its content added right before the content box
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.OtherHeadTags">
            <summary>
            All content in the field will be added directly, as-is to the document head.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.PageTitle">
            <summary>
            All content in the field will be added to the documents title tag
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.ProcessInterval">
            <summary>
            When present, this add-on will be executed stand-alone without a webpage periodically at this interval (in minutes).
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.ProcessNextRun">
            <summary>
            The next time this add-on is scheduled to run as a processs
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.ProcessRunOnce">
            <summary>
            Check true, this addon will be run once within the next minute as a stand-alone process.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.RemoteMethod">
            <summary>
            if true, this add-on can be executed as a remote method. The name of the addon is used as the url.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.RobotsTxt">
            <summary>
            When present, this text will be added to the robots.txt content for the site. This content is editable through the preferences page
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.ScriptCode">
            <summary>
            When present, the first routine of this script will be executed when the add-on is executed and its return added to the add-ons return
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.ScriptEntryPoint">
            <summary>
            If the ScriptCode has more than one routine and you want to run one other than the first, list is here.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.ScriptLanguage">
            <summary>
            The script language selected for this script.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPAddonBaseClass.SharedStyles">
            <summary>
            A comma delimited list of the local id values of shared style record that will display with this add-on
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPAdminUIBaseClass">
            <summary>
            Methods to create a uniform admin UI interface
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetEditRow(System.String,System.String)">
            <summary>
            Create an html row that includes a caption, editor and optional help content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetEditRow(System.String,System.String,System.String)">
            <summary>
            Create an html row that includes a caption, editor and optional help content
            </summary>
            <param name="caption"></param>
            <param name="editor"></param>
            <param name="help"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetEditRow(System.String,System.String,System.String,System.String)">
            <summary>
            Create an html row that includes a caption, editor and optional help content
            </summary>
            <param name="caption"></param>
            <param name="editor"></param>
            <param name="help"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetEditRow(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create an html row that includes a caption, editor and optional help content
            </summary>
            <param name="caption"></param>
            <param name="editor"></param>
            <param name="help"></param>
            <param name="htmlId"></param>
            <param name="required"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetEditRow(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an html row that includes a caption, editor and optional help content
            </summary>
            <param name="caption"></param>
            <param name="editor"></param>
            <param name="help"></param>
            <param name="htmlId"></param>
            <param name="required"></param>
            <param name="blockBottomRule"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetBooleanEditor(System.String,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for a boolean field type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetBooleanEditor(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Create an input for a boolean field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetBooleanEditor(System.String,System.Boolean,System.String)">
            <summary>
            Create an input for a boolean field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetBooleanEditor(System.String,System.Boolean)">
            <summary>
            Create an input for a boolean field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetCurrencyEditor(System.String,System.Nullable{System.Double},System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for a boolean field type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetCurrencyEditor(System.String,System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
            Create an input for a boolean field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetCurrencyEditor(System.String,System.Nullable{System.Double},System.String)">
            <summary>
            Create an input for a boolean field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetCurrencyEditor(System.String,System.Nullable{System.Double})">
            <summary>
            Create an input for a boolean field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetDateTimeEditor(System.String,System.Nullable{System.DateTime},System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for a datetime field type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetDateTimeEditor(System.String,System.Nullable{System.DateTime},System.String,System.Boolean)">
            <summary>
            Create an input for a datetime field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetDateTimeEditor(System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            Create an input for a datetime field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetDateTimeEditor(System.String,System.Nullable{System.DateTime})">
            <summary>
            Create an input for a datetime field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetFileEditor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for a datetime field type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetFileEditor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create an input for a datetime field type
            </summary>
            <param name="htmlName"></param>
            <param name="currentPathFilename"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetFileEditor(System.String,System.String,System.String)">
            <summary>
            Create an input for a datetime field type
            </summary>
            <param name="htmlName"></param>
            <param name="currentPathFilename"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetFileEditor(System.String,System.String)">
            <summary>
            Create an input for a datetime field type
            </summary>
            <param name="htmlName"></param>
            <param name="currentPathFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetFileEditor(System.String)">
            <summary>
            Create an input for a datetime field type
            </summary>
            <param name="htmlName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetHtmlCodeEditor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for a htmlcode field type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetHtmlCodeEditor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create an input for a htmlcode field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetHtmlCodeEditor(System.String,System.String,System.String)">
            <summary>
            Create an input for a htmlcode field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetHtmlCodeEditor(System.String,System.String)">
            <summary>
            Create an input for a htmlcode field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetHtmlEditor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for a html field type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetHtmlEditor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create an input for a html field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetHtmlEditor(System.String,System.String,System.String)">
            <summary>
            Create an input for a html field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetHtmlEditor(System.String,System.String)">
            <summary>
            Create an input for a html field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetImageEditor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for a html field type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetImageEditor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create an input for a html field type
            </summary>
            <param name="htmlName"></param>
            <param name="currentPathFilename"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetImageEditor(System.String,System.String,System.String)">
            <summary>
            Create an input for a html field type
            </summary>
            <param name="htmlName"></param>
            <param name="currentPathFilename"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetImageEditor(System.String,System.String)">
            <summary>
            Create an input for a html field type
            </summary>
            <param name="htmlName"></param>
            <param name="currentPathFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetIntegerEditor(System.String,System.Nullable{System.Int32},System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for an integer field type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetIntegerEditor(System.String,System.Nullable{System.Int32},System.String,System.Boolean)">
            <summary>
            Create an input for an integer field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetIntegerEditor(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Create an input for an integer field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetIntegerEditor(System.String,System.Nullable{System.Int32})">
            <summary>
            Create an input for an integer field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLinkEditor(System.String,System.Nullable{System.Int32},System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for an integer field type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLinkEditor(System.String,System.Nullable{System.Int32},System.String,System.Boolean)">
            <summary>
            Create an input for an integer field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLinkEditor(System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Create an input for an integer field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLinkEditor(System.String,System.Nullable{System.Int32})">
            <summary>
            Create an input for an integer field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLongTextEditor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for all text field types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLongTextEditor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create an input for all text field types
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLongTextEditor(System.String,System.String,System.String)">
            <summary>
            Create an input for all text field types
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLongTextEditor(System.String,System.String)">
            <summary>
            Create an input for all text field types
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupContentEditor(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Create an input for a lookup content field type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupContentEditor(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for a lookup content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupContentId"></param>
            <param name="lookupRecordId"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <param name="required"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupContentEditor(System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Create an input for a lookup content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupContentId"></param>
            <param name="lookupRecordId"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupContentEditor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Create an input for a lookup content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupContentId"></param>
            <param name="lookupRecordId"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupContentEditor(System.String,System.Int32,System.Int32)">
            <summary>
            Create an input for a lookup content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupContentId"></param>
            <param name="lookupRecordId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupContentEditor(System.String,System.Int32)">
            <summary>
            Create an input for a lookup content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupContentId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupContentEditor(System.String,System.String,System.Int32,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Create a lookup into content
            </summary>
            <param name="htmlName"></param>
            <param name="lookupContentName"></param>
            <param name="lookupRecordId"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <param name="required"></param>
            <param name="sqlFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupContentEditor(System.String,System.String,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for a lookup content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupContentName"></param>
            <param name="lookupRecordId"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <param name="required"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupContentEditor(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Create an input for a lookup content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupContentName"></param>
            <param name="lookupRecordId"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupContentEditor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Create an input for a lookup content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupContentName"></param>
            <param name="lookupRecordId"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupContentEditor(System.String,System.String,System.Int32)">
            <summary>
            Create an input for a lookup content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupContentName"></param>
            <param name="lookupRecordId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupContentEditor(System.String,System.String)">
            <summary>
            Create an input for a lookup content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupContentName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupListEditor(System.String,System.Collections.Generic.List{System.String},System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for a lookup list content field type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupListEditor(System.String,System.Collections.Generic.List{System.String},System.Int32,System.String,System.Boolean)">
            <summary>
            Create an input for a lookup list content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupList"></param>
            <param name="lookupListIndex"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupListEditor(System.String,System.Collections.Generic.List{System.String},System.Int32,System.String)">
            <summary>
            Create an input for a lookup list content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupList"></param>
            <param name="lookupListIndex"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupListEditor(System.String,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Create an input for a lookup list content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupList"></param>
            <param name="lookupListIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupListEditor(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Create an input for a lookup list content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupList"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupListEditor(System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for a lookup list content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupList"></param>
            <param name="lookupListName"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <param name="required"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupListEditor(System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)">
            <summary>
            Create an input for a lookup list content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupList"></param>
            <param name="lookupListName"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupListEditor(System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Create an input for a lookup list content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupList"></param>
            <param name="lookupListName"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetLookupListEditor(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Create an input for a lookup list content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupList"></param>
            <param name="lookupListName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetMemberSelectEditor(System.String,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for a member select content field type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetMemberSelectEditor(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Create an input for a member select content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupPersonId"></param>
            <param name="groupGuid"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetMemberSelectEditor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Create an input for a member select content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupPersonId"></param>
            <param name="groupGuid"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetMemberSelectEditor(System.String,System.Int32,System.String)">
            <summary>
            Create an input for a member select content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupPersonId"></param>
            <param name="groupGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetMemberSelectEditor(System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for a member select content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupPersonId"></param>
            <param name="groupId"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <param name="required"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetMemberSelectEditor(System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Create an input for a member select content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupPersonId"></param>
            <param name="groupId"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetMemberSelectEditor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Create an input for a member select content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupPersonId"></param>
            <param name="groupId"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetMemberSelectEditor(System.String,System.Int32,System.Int32)">
            <summary>
            Create an input for a member select content field type
            </summary>
            <param name="htmlName"></param>
            <param name="lookupPersonId"></param>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetNumberEditor(System.String,System.Nullable{System.Double},System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for a number field type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetNumberEditor(System.String,System.Nullable{System.Double},System.String,System.Boolean)">
            <summary>
            Create an input for a number field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetNumberEditor(System.String,System.Nullable{System.Double},System.String)">
            <summary>
            Create an input for a number field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetNumberEditor(System.String,System.Nullable{System.Double})">
            <summary>
            Create an input for a number field type
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetPasswordEditor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for all text field types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetPasswordEditor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create an input for all text field types
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetPasswordEditor(System.String,System.String,System.String)">
            <summary>
            Create an input for all text field types
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetPasswordEditor(System.String,System.String)">
            <summary>
            Create an input for all text field types
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetSelectorStringEditor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for all text field types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetSelectorStringEditor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create an input for all text field types
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="selectorString"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetSelectorStringEditor(System.String,System.String,System.String,System.String)">
            <summary>
            Create an input for all text field types
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="selectorString"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetSelectorStringEditor(System.String,System.String,System.String)">
            <summary>
            Create an input for all text field types
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="selectorString"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetTextEditor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create an input for all text field types
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetTextEditor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Create an input for all text field types
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <param name="readOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetTextEditor(System.String,System.String,System.String)">
            <summary>
            Create an input for all text field types
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.GetTextEditor(System.String,System.String)">
            <summary>
            Create an input for all text field types
            </summary>
            <param name="htmlName"></param>
            <param name="htmlValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.NewToolForm">
            <summary>
            Create a new instance of a Tool Form. Tool Forms are simple forms with key elements like buttons and header with a simple body
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPAdminUIBaseClass.NewListReport">
            <summary>
            Create a new instance of a List Report. List reports have a list of data rows with filters on the left
            </summary>
            <returns></returns>
        </member>
        <member name="T:Contensive.BaseClasses.CPBaseClass">
            <summary>
            CP - The object passed to an addon in the add-ons execute method. See the AddonBaseClass for details of the addon execute method.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Addon">
            <summary>
            The addon class handles access to an add-on's features. Use the Utils object to run an cpcore.addon. An instance of the Addon class is passed to the executing addon in the MyAddon object so it can access any features needed. See the CPAddonBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.AdminUI">
            <summary>
            Classes and methods to create forms for the admin user interface
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPBaseClass.GetAppConfig(System.String)">
            <summary>
            Return the configuration of the app name specified. Use 
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPBaseClass.GetAppConfig">
            <summary>
            The current application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPBaseClass.GetAppNameList">
            <summary>
            A list of the names (keys) for all apps on this server groups
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPBaseClass.BlockNew">
            <summary>
            Construct new Block object. See CPBlockBaseClass for Block Details
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Cache">
            <summary>
            The Cache objects handles caching. Use this class to save blocks of data you will use again. See CPCacheBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.CdnFiles">
            <summary>
            read and write cdn files, like content uploads. Sites with static front-ends may put static files here.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Content">
            <summary>
            The Content class handles functions related to content meta such as determining the table used for a content definition, getting a recordid based on the name, or accessing the methods that control workflow publishing. See CPContentBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBaseClass.CSNew">
            <summary>
            Construct new CS object. See CPCSBaseClass for CS object details 
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Db">
            <summary>
            The Db object handles direct access to the Database. The ContentSet functions in the CPCSBaseClass are prefered for general use. See the CPDBBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBaseClass.DbNew(System.String)">
            <summary>
            Construct new Db object. CP.Db methods are for the default datasource. 
            Use this method to create a db object for other datasources. 
            See CPDbBaseClass for Db object details 
            </summary>
            <returns>Returns a new Db class. If the Datasource cannot be opened an exception is thrown.</returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Doc">
            <summary>
            The Doc object handles features related to the document (page) being contructed in the current call. See CPDocBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Email">
            <summary>
            The Email object handles email functions. See CPEmailBaseClass for more information.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.File">
            <summary>
            Legacy file object. Use FileCdn, FileAppRoot, FilePrivate and tempFiles.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Group">
            <summary>
            The Group Object accesses group features. Group Features generally associate people and roles. See CPGroupBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Html">
            <summary>
            The HTML class handles functions used to read and produce HTML elements. See CPHtmlBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Html5">
            <summary>
            The HTML class handles functions used to read and produce HTML elements. See CPHtmlBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Http">
            <summary>
            Helper class for common http request methods. For saving http verbs to files, see the file object
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Image">
            <summary>
            Image controller
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.JSON">
            <summary>
            utilities for json
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Layout">
            <summary>
            manage application layout records.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Log">
            <summary>
            The Log class manages server logs
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.MessageQueue">
            <summary>
            read and write messages to a standard message queue
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Mustache">
            <summary>
            Manage mustache compatible template language operations
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.PrivateFiles">
            <summary>
            read and write files not available to the Internet
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Request">
            <summary>
            The Request object handles data associated with the request from the visitor. See CPRequestBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Response">
            <summary>
            The Response object handles the stream of data back to the visitor. See CPResponseBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.ServerConfig">
            <summary>
            Server configuration
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Site">
            <summary>
            The Site Class handles features related to the current site. See CPSiteBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Security">
            <summary>
            read and write files in a temporary location.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.SMS">
            <summary>
            Text messaging services
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.TempFiles">
            <summary>
            A local file system that automatically deletes files
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.User">
            <summary>
            The User Class handles details related to the user and its related people record. See CPUserBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.UserError">
            <summary>
            The UserError Class handles error handling for those conditions you want the user to know about or correct. For example an login error. See the CPUserErrorBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Visit">
            <summary>
            The Visit Class handles details related to the visit. For instance it holds the number of pages hit so far and has methods for adding and modifying user defined visit properties. See CPVisitBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Visitor">
            <summary>
            The Visitor Class handles details related to the visitor. For instance it holds the browser type used by the visitor. See CPVisitorBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Utils">
            <summary>
            The Utils class handles basic utilities and other features not classified. See CPUtilsBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.Version">
            <summary>
            Contensive version
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.WwwFiles">
            <summary>
            read and write files in the root folder of the application (appRoot, wwwRoot,htdocs,etc)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPBaseClass.MyAddon">
            <summary>
            The MyAddon object is an instance of the Addon class created before an add-ons execute method is called. See CPAddonBaseClass for more details.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Contensive.BaseClasses.CPBlockBaseClass">
            <summary>
            CP.Block - an object that holds and manipulates a block of html
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBlockBaseClass.Load(System.String)">
            <summary>
            Load the block with an html string
            </summary>
            <param name="htmlString"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBlockBaseClass.OpenFile(System.String)">
            <summary>
            load the block with the entire contents of a file in the wwwRoot
            </summary>
            <param name="wwwFileName"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBlockBaseClass.OpenCopy(System.String)">
            <summary>
            load the block with the contents of a record in Copy Content
            </summary>
            <param name="copyRecordName"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBlockBaseClass.OpenLayout(System.String)">
            <summary>
            load the block with the contents of a record in Layouts
            </summary>
            <param name="layoutRecordName"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBlockBaseClass.ImportFile(System.String)">
            <summary>
            load the block with the body of a file in the wwwRoot
            </summary>
            <param name="wwwFileName"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBlockBaseClass.SetInner(System.String,System.String)">
            <summary>
            set the innerHtml of an element in the current block specified by the findSelector
            </summary>
            <param name="findSelector"></param>
            <param name="htmlString"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBlockBaseClass.GetInner(System.String)">
            <summary>
            Return the innerHtml from the current block specified by the findSelector
            </summary>
            <param name="findSelector"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBlockBaseClass.SetOuter(System.String,System.String)">
            <summary>
            Set the OuterHtml in the current block specified by the findSelector to the htmlString
            </summary>
            <param name="findSelector"></param>
            <param name="htmlString"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBlockBaseClass.GetOuter(System.String)">
            <summary>
            return the outer Html specified by the findSelector
            </summary>
            <param name="findSelector"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBlockBaseClass.Append(System.String)">
            <summary>
            append the htmlString into the current Block
            </summary>
            <param name="htmlString"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBlockBaseClass.Prepend(System.String)">
            <summary>
            Prepend the htmlString on the current block
            </summary>
            <param name="htmlString"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBlockBaseClass.GetHtml">
            <summary>
            return the entire html of the current block
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBlockBaseClass.Clear">
            <summary>
             Clear the contents of the current block
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPBlockBaseClass.Dispose">
            <summary>
            support IDisposable
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPCacheBaseClass">
            <summary>
            CP.Cache - local and remote caching
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.Clear(System.Collections.Generic.List{System.String})">
            <summary>
            Invalidate one or more cache objects by key
            </summary>
            <param name="keyList"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.GetObject(System.String)">
            <summary>
            Return the value of a cache. If empty or invalid, returns null.
            </summary>
            <param name="key"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.GetText(System.String)">
            <summary>
            Return a string from cache. If empty or invalid, returns empty string.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.GetInteger(System.String)">
            <summary>
            Return an integer from cache. If empty or invalid, returns 0.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.GetNumber(System.String)">
            <summary>
            Return a double from cache. If empty or invalid, returns 0.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.GetDate(System.String)">
            <summary>
            Return a date from cache. If empty or invalid, returns Date.MinValue.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.GetBoolean(System.String)">
            <summary>
            Return a boolean from cache. If empty or invalid, returns false.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.ClearAll">
            <summary>
            Invalidate all system cache.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.Invalidate(System.String)">
            <summary>
            Invalidate a cache.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.InvalidateAll">
            <summary>
            Invalidate all system cache.
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.InvalidateTagList(System.Collections.Generic.List{System.String})">
            <summary>
            Invalidate a list of cache keys.
            </summary>
            <param name="keyList"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.InvalidateContentRecord(System.String,System.Int32)">
            <summary>
            Invalidate a key based on the content name  and recordId
            </summary>
            <param name="contentName"></param>
            <param name="recordId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.InvalidateTableRecord(System.String,System.Int32)">
            <summary>
            Invalidate a key based on the table and recordId
            </summary>
            <param name="tableName"></param>
            <param name="recordId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.InvalidateTable(System.String)">
            <summary>
            Invalidate all cache entries dependent on this tableKey
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.CreateTableDependencyKey(System.String,System.String)">
            <summary>
            Create a key used only as a dependency. If any record in the table is added/deleted/modified, this key will be updated, invalidating the parent object.
            Uses UpdateLastModified
            Uses the 
            </summary>
            <param name="tableName"></param>
            <param name="dataSourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.CreateTableDependencyKey(System.String)">
            <summary>
            Create a key for a database table. Use this key to invalidate all keys based on thsi table using dependent keys.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.invalidateTableDependencyKey(System.String)">
            <summary>
            Updates the cache dependency key for this table that a record in this table has been modified
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.CreateRecordKey(System.Int32,System.String,System.String)">
            <summary>
            Create a cache key for a database model object
            </summary>
            <param name="recordId"></param>
            <param name="tableName"></param>
            <param name="dataSourceName"></param>
            <returns></returns>        
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.CreateRecordKey(System.Int32,System.String)">
            <summary>
            Create a key for a database record in the default datasource
            </summary>
            <param name="recordId"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.CreateKey(System.String,System.String)">
            <summary>
            Create a cache key for a domain model. ObjectName can be generic domain model name. The unique Identifier must be unique, for example the id of a core record in the model.
            </summary>
            <param name="objectName"></param>
            <param name="objectUniqueIdentifier"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.CreateKey(System.String)">
            <summary>
            Create a cache key for a domain model.
            </summary>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.CreatePtrKeyforDbRecordGuid(System.String,System.String,System.String)">
            <summary>
            Create a key pointer for a db model object.
            A Ptr key doesnt contain the object, but points to a key for an object.
            When you get a cache object from a Ptr Key, the object it points to is returned.
            For example, data may be stored in a cache named for the id of a record, then a pointer created for the guid of the record.
            </summary>
            <param name="guid"></param>
            <param name="tableName"></param>
            <param name="dataSourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.CreatePtrKeyforDbRecordGuid(System.String,System.String)">
            <summary>
            Create a key pointer for a db model object.
            </summary>
            <param name="guid"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.CreatePtrKeyforDbRecordUniqueName(System.String,System.String,System.String)">
            <summary>
            Create a Ptr key for a db model object based on the record name. Only for tables where the name is unique
            </summary>
            <param name="name"></param>
            <param name="tableName"></param>
            <param name="dataSourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.CreatePtrKeyforDbRecordUniqueName(System.String,System.String)">
            <summary>
            Create a Ptr key for a db model object based on the record name.
            </summary>
            <param name="name"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.GetObject``1(System.String)">
            <summary>
            Get an object of type T from cache. If empty or invalid type, returns Null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.Store(System.String,System.Object)">
            <summary>
            Store an object to a key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.Store(System.String,System.Object,System.DateTime)">
            <summary>
            Store an object to a key. Invalidate at the date and time specified.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="invalidationDate"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.Store(System.String,System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            Store an object to a key.
             Invalidate the object if a dependentKey is updated after this object is stored.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dependentKeyList"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.Store(System.String,System.Object,System.DateTime,System.Collections.Generic.List{System.String})">
            <summary>
            Store an object to a key. Invalidate at the date and time specified.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="invalidationDate"></param>
            <param name="dependentKeyList"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.Store(System.String,System.Object,System.String)">
            <summary>
            Store an object to a key. 
            Invalidate the object if a dependentKey is updated after this object is stored.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dependentKey"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.Store(System.String,System.Object,System.DateTime,System.String)">
            <summary>
            Store an object to a key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="invalidationDate"></param>
            <param name="dependentKey"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.StorePtr(System.String,System.String)">
            <summary>
            Store a ptr to a cache entry. For example you may store an object by its recordId, but need to reference it by its guid. Create the cache key with the id, and a cache ptr which refers the guid to the cacheKey and a Get of the ptr will return the cache entry for the id.
            </summary>
            <param name="keyPtr"></param>
            <param name="key"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.UpdateLastModified(System.String)">
            <summary>
            Use InvalidateTableDependencyKey() instead
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.CreateKeyForDbRecord(System.Int32,System.String)">
            <summary>
            use CreateRecordKey() instead
            </summary>
            <param name="recordId"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.CreateKeyForDbRecord(System.Int32,System.String,System.String)">
            <summary>
            use CreateRecordKey() instead
            </summary>
            <param name="recordId"></param>
            <param name="tableName"></param>
            <param name="dataSourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.CreateDependencyKeyInvalidateOnChange(System.String)">
            <summary>
            use CreateTabledependencyKey() instead
            </summary>
            <param name="tablename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.CreateDependencyKeyInvalidateOnChange(System.String,System.String)">
            <summary>
            use CreateTabledependencyKey() instead
            </summary>
            <param name="tablename"></param>
            <param name="datasource"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.SetKey(System.String,System.Object)">
            <summary>
            use Store() instead
            </summary>
            <param name="key"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.SetKey(System.String,System.Object,System.DateTime)">
            <summary>
            use Store() instead
            </summary>
            <param name="key"></param>
            <param name="Value"></param>
            <param name="invalidationDate"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.SetKey(System.String,System.Object,System.Collections.Generic.List{System.String})">
            <summary>
            use Store() instead
            </summary>
            <param name="key"></param>
            <param name="Value"></param>
            <param name="tagList"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.SetKey(System.String,System.Object,System.DateTime,System.Collections.Generic.List{System.String})">
            <summary>
            use Store() instead
            </summary>
            <param name="key"></param>
            <param name="Value"></param>
            <param name="invalidationDate"></param>
            <param name="tagList"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.SetKey(System.String,System.Object,System.String)">
            <summary>
            use Store() instead
            </summary>
            <param name="key"></param>
            <param name="Value"></param>
            <param name="tag"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.SetKey(System.String,System.Object,System.DateTime,System.String)">
            <summary>
            use Store() instead
            </summary>
            <param name="key"></param>
            <param name="Value"></param>
            <param name="invalidationDate"></param>
            <param name="tag"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.Clear(System.String)">
            <summary>
            Use Clear(dependentKeyList)
            </summary>
            <param name="ContentNameList"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.Read(System.String)">
            <summary>
            Use GetText(key) instead
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.InvalidateTag(System.String)">
            <summary>
            Use Invalidate(key)
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.Save(System.String,System.String)">
            <summary>
            Use Store()
            </summary>
            <param name="key"></param>
            <param name="Value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.Save(System.String,System.String,System.String)">
            <summary>
            Use Store()
            </summary>
            <param name="key"></param>
            <param name="Value"></param>
            <param name="tagCommaList"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCacheBaseClass.Save(System.String,System.String,System.String,System.DateTime)">
            <summary>
            Use Store()
            </summary>
            <param name="key"></param>
            <param name="Value"></param>
            <param name="tagCommaList"></param>
            <param name="ClearOnDate"></param>
        </member>
        <member name="P:Contensive.BaseClasses.CPContentBaseClass.LatestContentModifiedDate">
            <summary>
            Track the latest modified date
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum">
            <summary>
            Field types. This enum replaces FileTypeIdEnug.
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.Integer">
            <summary>
            (int32) Positive and negative integer 32-bit values, -2,147,483,648 to 2,147,483,647
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.Text">
            <summary>
            (string) Literal strings stored up to 255 characters.
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.LongText">
            <summary>
            (string) Literal strings stored up to 65535 characters.
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.Boolean">
            <summary>
            (bool) true or false. Stored in Db as integer, 0=false, 1=true. Tested as null|0 = false oterwise true
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.Date">
            <summary>
            (date)
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.File">
            <summary>
            Uploaded file of any type. Path is created specifically for the path it is created in and stored in the db as an varchar(255)
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.Lookup">
            <summary>
            (int) A foreign key to the primary key (id) of another table
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.Redirect">
            <summary>
            no value stored. This field holds metadata that creates a forward link on the editing page for many-to-many fields
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.Currency">
            <summary>
            (double) usd currency
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.FileText">
            <summary>
            (string, varchar(255)), stores the path and filename of a content file holding text
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.FileImage">
            <summary>
            Uploaded image file. Path is created specifically for the path it is created in and stored in the db as an varchar(255)
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.Float">
            <summary>
            (double)
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.AutoIdIncrement">
            <summary>
            (integer). Creates automatically incrementing integer
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.ManyToMany">
            <summary>
            no value stored. This field hold metadata that creates a checkbox list for a many-to-many relationship
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.MemberSelect">
            <summary>
            (int) Holds a lookup id for the ccmembers table limited by those in a group definied in the metadata
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.FileCSS">
            <summary>
            (string, varchar(255)), holds a path and filename to a css content file
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.FileXML">
            <summary>
            (string, varchar(255)), holds a path and filename to an xml content file
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.FileJavascript">
            <summary>
            (string, varchar(255)), holds a path and filename to a javascript content file
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.Link">
            <summary>
            
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.ResourceLink">
            <summary>
            (string, varchar(255)), holds a url
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.HTML">
            <summary>
            (string, varchar(max)), holds text content that represents html
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.FileHTML">
            <summary>
            (string, varchar(255)), holds a path and filename to a content file with html content
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.HTMLCode">
            <summary>
            (string, varchar(max)), holds text content that represents html and edited as html code
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum.FileHTMLCode">
            <summary>
            (string, varchar(255)), holds a path and filename to a content file with html content and edited as html code
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetCopy(System.String,System.String)">
            <summary>
            Get the string from the 'Copy Content' record based on it's name. If the record does not exist it is created with the default value provided.
            </summary>
            <param name="CopyName"></param>
            <param name="DefaultContent"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetCopy(System.String)">
            <summary>
            Get the string from the 'Copy Content' record based on it's name. If the record does not exist it is created with the default value provided.
            </summary>
            <param name="CopyName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetCopy(System.String,System.String,System.Int32)">
            <summary>
            Get the string from the 'Copy Content' record based on it's name. If the record does not exist it is created with the default value provided.
            </summary>
            <param name="CopyName"></param>
            <param name="DefaultContent"></param>
            <param name="personalizationPeopleId"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.SetCopy(System.String,System.String)">
            <summary>
            Set a string in a 'Copy Content' record. The record will be created or modified.
            </summary>
            <param name="CopyName"></param>
            <param name="Content"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetAddLink(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get an icon linked to the administration site which adds a new record to the content.
            </summary>
            <param name="ContentName"></param>
            <param name="PresetNameValueList">A comma delimited list of name=value pairs. Each name is a field name and the value is used to prepopulate the new record.</param>
            <param name="AllowPaste">If true and the content supports cut-paste from the public site, the returned string will include a cut icon.</param>
            <param name="IsEditing">If false, this call returns nothing. Set it true if IsEdiing( contentname ) is true.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetAddLink(System.String,System.String)">
            <summary>
            Get an icon linked to the administration site which adds a new record to the content.
            </summary>
            <param name="ContentName"></param>
            <param name="PresetNameValueList"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetAddLink(System.String)">
            <summary>
            Get an icon linked to the administration site which adds a new record to the content.
            </summary>
            <param name="ContentName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetAddLink(System.Int32,System.String)">
            <summary>
            Get an icon linked to the administration site which adds a new record to the content.
            </summary>
            <param name="contentId"></param>
            <param name="PresetNameValueList"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetAddLink(System.Int32)">
            <summary>
            Get an icon linked to the administration site which adds a new record to the content.
            </summary>
            <param name="contentId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetContentControlCriteria(System.String)">
            <summary>
            Returns an SQL compatible where-clause which includes all the contentcontentid values allowed for this content name.
            </summary>
            <param name="ContentName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetID(System.String)">
            <summary>
            Returns the content id given its name
            </summary>
            <param name="ContentName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetName(System.Int32)">
            <summary>
            Return the contentName from its id
            </summary>
            <param name="contentId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetDataSource(System.String)">
            <summary>
            Returns the datasource name of the content given.
            </summary>
            <param name="ContentName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetEditLink(System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Get the system edit link
            </summary>
            <param name="contentName"></param>
            <param name="recordId"></param>
            <param name="allowCut">If true and the content allows cut and paste, and cut icon will be included in the return string.</param>
            <param name="recordLabel">Used as a caption for the label</param>
            <param name="IsEditing">If false, this call returns nothing. Set it true if IsEdiing( contentname ) is true.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetEditLink(System.String,System.Int32)">
            <summary>
            Get the system edit link
            </summary>
            <param name="contentName"></param>
            <param name="recordId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetEditLink(System.String,System.String)">
            <summary>
            Get the system edit link
            </summary>
            <param name="contentName"></param>
            <param name="recordGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetEditLink(System.Int32,System.Int32)">
            <summary>
            Get the system edit link
            </summary>
            <param name="contentId"></param>
            <param name="recordId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetEditLink(System.Int32,System.String)">
            <summary>
            Get the system edit link
            </summary>
            <param name="contentId"></param>
            <param name="recordGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetEditWrapper(System.String)">
            <summary>
            wrap content in system editing region style.
            </summary>
            <param name="innerHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetEditWrapper(System.String,System.String,System.Int32)">
            <summary>
            wrap content in system editing region style with an edit link.
            </summary>
            <param name="innerHtml"></param>
            <param name="contentName"></param>
            <param name="recordId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetEditWrapper(System.String,System.String,System.String)">
            <summary>
            wrap content in system editing region style with an edit link.
            </summary>
            <param name="innerHtml"></param>
            <param name="contentName"></param>
            <param name="recordGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetEditWrapper(System.String,System.Int32,System.Int32)">
            <summary>
            wrap content in system editing region style with an edit link.
            </summary>
            <param name="innerHtml"></param>
            <param name="contentId"></param>
            <param name="recordId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetEditWrapper(System.String,System.Int32,System.String)">
            <summary>
            wrap content in system editing region style with an edit link.
            </summary>
            <param name="innerHtml"></param>
            <param name="contentId"></param>
            <param name="recordGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetLinkAliasByPageID(System.Int32,System.String,System.String)">
            <summary>
            Returns the primary link alias for the record id and querystringsuffix. If no link alias exists, it defaultvalue is returned.
            </summary>
            <param name="PageID"></param>
            <param name="QueryStringSuffix">In the case where an add-on is on the page, there may be many unique documents possible from the one pageid. Each possible variation is determined by values in the querystring added by the cpcore.addon. These name=value pairs in Querystring format are used to identify additional link aliases.</param>
            <param name="DefaultLink">If no link alias is found, this value is returned.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetPageLink(System.Int32,System.String,System.Boolean)">
            <summary>
            Return the appropriate link for a page.
            </summary>
            <param name="PageID"></param>
            <param name="QueryStringSuffix">If a link alias exists, this is used to lookup the correct alias. See GetLinkAliasByPageID for details. In other cases, this is added to the querystring.</param>
            <param name="AllowLinkAlias"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetPageLink(System.Int32,System.String)">
            <summary>
            Return the appropriate link for a page.
            </summary>
            <param name="PageID"></param>
            <param name="QueryStringSuffix"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetPageLink(System.Int32)">
            <summary>
            Return the appropriate link for a page.
            </summary>
            <param name="PageID"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetRecordID(System.String,System.String)">
            <summary>
            Return a record's ID given it's name. If duplicates exist, the first one ordered by ID is returned.
            </summary>
            <param name="ContentName"></param>
            <param name="RecordName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetRecordName(System.String,System.Int32)">
            <summary>
            Return a records name given it's ID.
            </summary>
            <param name="ContentName"></param>
            <param name="RecordID"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetTable(System.String)">
            <summary>
            Get the table used for a content definition.
            </summary>
            <param name="ContentName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.IsField(System.String,System.String)">
            <summary>
            Used to test if a field exists in a content definition
            </summary>
            <param name="ContentName"></param>
            <param name="FieldName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.IsLocked(System.String,System.String)">
            <summary>
            Returns true if the record is currently being edited.
            </summary>
            <param name="ContentName"></param>
            <param name="RecordID"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.IsChildContent(System.String,System.String)">
            <summary>
            Returns true if the childcontentid is a child of the parentcontentid
            </summary>
            <param name="ChildContentID"></param>
            <param name="ParentContentID"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.AddRecord(System.String)">
            <summary>
            Inserts a record and returns the Id for the record
            </summary>
            <param name="ContentName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.AddRecord(System.String,System.String)">
            <summary>
            Insert a record and set its name. REturn the id of the record.
            </summary>
            <param name="ContentName"></param>
            <param name="recordName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.AddContent(System.String,System.String,System.String)">
            <summary>
            Create a new content with sqlTablename and default fields on the default datasource. After the call, modify the content with the database model - Models.Db.ContentModel.create( cp, id )
            </summary>
            <param name="ContentName"></param>
            <param name="sqlTableName"></param>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.AddContent(System.String,System.String)">
            <summary>
            Create a new content with sqlTablename and default fields. After the call, modify the content with the database model - Models.Db.ContentModel.create( cp, id )
            </summary>
            <param name="ContentName"></param>
            <param name="sqlTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.AddContent(System.String)">
            <summary>
            Create a new content with default fields. sqlTablename created from contentName. After the call, modify the content with the database model - Models.Db.ContentModel.create( cp, id )
            </summary>
            <param name="ContentName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.AddContentField(System.String,System.String,System.Int32)">
            <summary>
            Create a new field in an existing content, return the fieldid
            </summary>
            <param name="ContentName"></param>
            <param name="FieldName"></param>
            <param name="FieldType"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.AddContentField(System.String,System.String,Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum)">
            <summary>
            Create a new field in an existing content, return the fieldid
            </summary>
            <param name="ContentName"></param>
            <param name="FieldName"></param>
            <param name="fieldTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.DeleteContent(System.String)">
            <summary>
            Delete a content from the system, sqlTable is left intact. Use db.DeleteTable to drop the table
            </summary>
            <param name="ContentName"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.Delete(System.String,System.String)">
            <summary>
            Delete records based from a table based on a content name and SQL criteria.
            </summary>
            <param name="ContentName"></param>
            <param name="SQLCriteria"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetListLink(System.String)">
            <summary>
            Returns a linked icon to the admin list page for the content
            </summary>
            <param name="ContentName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetTableID(System.String)">
            <summary>
            Return the recordId in the ccTables table for this table
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.getLayout(System.String)">
            <summary>
            Deprecated, use CP.Layout.GetLayoutByName()
            </summary>
            <param name="layoutName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.getLayout(System.String,System.String)">
            <summary>
            Deprecated, use CP.Layout.GetLayoutByName()
            </summary>
            <param name="layoutName"></param>
            <param name="defaultLayout"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetLayout(System.Int32)">
            <summary>
            Returns the html layout field of a layout record
            </summary>
            <param name="layoutId"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetTemplateLink(System.Int32)">
            <summary>
            Deprecated, template link is not supported
            </summary>
            <param name="TemplateID"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.IsWorkflow(System.String)">
            <summary>
            workflow editing is deprecated
            </summary>
            <param name="ContentName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.PublishEdit(System.String,System.Int32)">
            <summary>
            workflow editing is deprecated
            </summary>
            <param name="ContentName"></param>
            <param name="RecordID"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.SubmitEdit(System.String,System.Int32)">
            <summary>
            workflow editing is deprecated
            </summary>
            <param name="ContentName"></param>
            <param name="RecordID"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.AbortEdit(System.String,System.Int32)">
            <summary>
            workflow editing is deprecated
            </summary>
            <param name="ContentName"></param>
            <param name="RecordId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.ApproveEdit(System.String,System.Int32)">
            <summary>
            workflow editing is deprecated
            </summary>
            <param name="ContentName"></param>
            <param name="RecordId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.AddRecord(System.Object)">
            <summary>
            Deprecated, use AddRecord(string)
            </summary>
            <param name="ContentName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetProperty(System.String,System.String)">
            <summary>
            Deprecated. Use models to access record fields
            </summary>
            <param name="ContentName"></param>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.GetFieldProperty(System.String,System.String,System.String)">
            <summary>
            Deprecated, use GetFieldMeta and use the property
            </summary>
            <param name="ContentName"></param>
            <param name="FieldName"></param>
            <param name="PropertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPContentBaseClass.AddContentField(System.String,System.String,Contensive.BaseClasses.CPContentBaseClass.fileTypeIdEnum)">
            <summary>
            Deprecated, use method with FieldTypeIdEnum
            </summary>
            <param name="ContentName"></param>
            <param name="FieldName"></param>
            <param name="fileTypeEnum"></param>
            <returns></returns>
        </member>
        <member name="T:Contensive.BaseClasses.CPContentBaseClass.fileTypeIdEnum">
            <summary>
            Obsolete. Use FieldTypeIdEnum
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPCSBaseClass">
            <summary>
            CP.CS - The secondary interface to execute queries on a sql database. Use dbModels when possible (does not use cdef metadata). To run queries, use executeQuery, executeNonQuery and executeNonQueryAsync.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.Insert(System.String)">
            <summary>
            Insert a record, leaving the dataset open in this object. Call cs.close() to close the data
            </summary>
            <param name="contentName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenRecord(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Opens a record set with the record specified by the recordId
            </summary>
            <param name="contentName"></param>
            <param name="recordId"></param>
            <param name="selectFieldList"></param>
            <param name="activeOnly"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenRecord(System.String,System.Int32,System.String)">
            <summary>
            Opens a record set with the record specified by the recordId
            </summary>
            <param name="contentName"></param>
            <param name="recordId"></param>
            <param name="selectFieldList"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenRecord(System.String,System.Int32)">
            <summary>
            Opens a record set with the record specified by the recordId
            </summary>
            <param name="contentName"></param>
            <param name="recordId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenRecord(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Opens a record set with the record specified by the recordGuid
            </summary>
            <param name="contentName"></param>
            <param name="recordGuid"></param>
            <param name="selectFieldList"></param>
            <param name="activeOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenRecord(System.String,System.String,System.String)">
            <summary>
            Opens a record set with the record specified by the recordGuid
            </summary>
            <param name="contentName"></param>
            <param name="recordGuid"></param>
            <param name="selectFieldList"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenRecord(System.String,System.String)">
            <summary>
            Opens a record set with the record specified by the recordGuid
            </summary>
            <param name="contentName"></param>
            <param name="recordGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.Open(System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Opens a record set with the records specified by the sqlCriteria
            </summary>
            <param name="contentName"></param>
            <param name="sqlCriteria"></param>
            <param name="sortFieldList"></param>
            <param name="activeOnly"></param>
            <param name="selectFieldList"></param>
            <param name="pageSize"></param>
            <param name="pageNumber"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.Open(System.String,System.String,System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Opens a record set with the records specified by the sqlCriteria
            </summary>
            <param name="contentName"></param>
            <param name="sqlCriteria"></param>
            <param name="sortFieldList"></param>
            <param name="activeOnly"></param>
            <param name="selectFieldList"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.Open(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Opens a record set with the records specified by the sqlCriteria
            </summary>
            <param name="contentName"></param>
            <param name="sqlCriteria"></param>
            <param name="sortFieldList"></param>
            <param name="activeOnly"></param>
            <param name="selectFieldList"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.Open(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Opens a record set with the records specified by the sqlCriteria
            </summary>
            <param name="contentName"></param>
            <param name="sqlCriteria"></param>
            <param name="sortFieldList"></param>
            <param name="activeOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.Open(System.String,System.String,System.String)">
            <summary>
            Opens a record set with the records specified by the sqlCriteria
            </summary>
            <param name="contentName"></param>
            <param name="sqlCriteria"></param>
            <param name="sortFieldList"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.Open(System.String,System.String)">
            <summary>
            Opens a record set with the records specified by the sqlCriteria
            </summary>
            <param name="contentName"></param>
            <param name="sqlCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.Open(System.String)">
            <summary>
            Opens a record set
            </summary>
            <param name="contentName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenGroupUsers(System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Opens a record set with user records that are in a Group
            </summary>
            <param name="groupName"></param>
            <param name="sqlCriteria"></param>
            <param name="sortFieldList"></param>
            <param name="activeOnly"></param>
            <param name="pageSize"></param>
            <param name="pageNumber"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenGroupUsers(System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Opens a record set with user records that are in a Group
            </summary>
            <param name="groupName"></param>
            <param name="sqlCriteria"></param>
            <param name="sortFieldList"></param>
            <param name="activeOnly"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenGroupUsers(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Opens a record set with user records that are in a Group
            </summary>
            <param name="groupName"></param>
            <param name="sqlCriteria"></param>
            <param name="sortFieldList"></param>
            <param name="activeOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenGroupUsers(System.String,System.String,System.String)">
            <summary>
            Opens a record set with user records that are in a Group
            </summary>
            <param name="groupName"></param>
            <param name="sqlCriteria"></param>
            <param name="sortFieldList"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenGroupUsers(System.String,System.String)">
            <summary>
            Opens a record set with user records that are in a Group
            </summary>
            <param name="groupName"></param>
            <param name="sqlCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenGroupUsers(System.String)">
            <summary>
            Opens a record set with user records that are in a Group
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenGroupUsers(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Opens a record set with user records that are in a Group
            </summary>
            <param name="groupList"></param>
            <param name="sqlCriteria"></param>
            <param name="sortFieldList"></param>
            <param name="activeOnly"></param>
            <param name="pageSize"></param>
            <param name="pageNumber"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenGroupUsers(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Opens a record set with user records that are in a Group
            </summary>
            <param name="groupList"></param>
            <param name="sqlCriteria"></param>
            <param name="sortFieldList"></param>
            <param name="activeOnly"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenGroupUsers(System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)">
            <summary>
            Opens a record set with user records that are in a Group
            </summary>
            <param name="groupList"></param>
            <param name="sqlCriteria"></param>
            <param name="sortFieldList"></param>
            <param name="activeOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenGroupUsers(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Opens a record set with user records that are in a Group
            </summary>
            <param name="groupList"></param>
            <param name="sqlCriteria"></param>
            <param name="sortFieldList"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenGroupUsers(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Opens a record set with user records that are in a Group
            </summary>
            <param name="groupList"></param>
            <param name="sqlCriteria"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenGroupUsers(System.Collections.Generic.List{System.String})">
            <summary>
            Opens a record set with user records that are in a Group
            </summary>
            <param name="groupList"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenSQL(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Opens a record set based on an sql statement
            </summary>
            <param name="sql"></param>
            <param name="dataSourcename"></param>
            <param name="pageSize"></param>
            <param name="pageNumber"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenSQL(System.String,System.String,System.Int32)">
            <summary>
            Opens a record set based on an sql statement
            </summary>
            <param name="sql"></param>
            <param name="dataSourcename"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenSQL(System.String,System.String)">
            <summary>
            Opens a record set based on an sql statement
            </summary>
            <param name="sql"></param>
            <param name="dataSourcename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OpenSQL(System.String)">
            <summary>
            Opens a record set based on an sql statement
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.Close">
            <summary>
             Closes an open record set
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetFormInput(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Returns a form input element based on a content field definition
            </summary>
            <param name="contentName"></param>
            <param name="fieldName"></param>
            <param name="height"></param>
            <param name="width"></param>
            <param name="htmlId"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.Delete">
            <summary>
            Deletes the current row
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.FieldOK(System.String)">
            <summary>
            Returns true if the given field is valid for this record set
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GoFirst">
            <summary>
            Move to the first record in the current record set
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetAddLink(System.String,System.Boolean)">
            <summary>
            Returns an icon linked to the add function in the admin site for this content
            </summary>
            <param name="presetNameValueList"></param>
            <param name="allowPaste"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetBoolean(System.String)">
            <summary>
            Returns the field value cast as a boolean
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetDate(System.String)">
            <summary>
            Returns the field value cast as a date
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetEditLink(System.Boolean)">
            <summary>
            get a system edit link
            </summary>
            <param name="allowCut"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetEditLink">
            <summary>
            get a system edit link
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetEditWrapper(System.String)">
            <summary>
            wrap content in system editing region style with an edit link
            </summary>
            <param name="innerHtml"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetFilename(System.String,System.String,System.String)">
            <summary>
            Returns the filename for the field, if a filename is related to the field type. Use this call to create the appropriate filename when a new file is added. The filename with the appropriate path is created or returned. This file and path is relative to the site's content file path and does not include a leading slash. To use this file in a URL, prefix with cp.Http.CdnFilePathPrefix.
            </summary>
            <param name="fieldName"></param>
            <param name="originalFilename"></param>
            <param name="contentName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetInteger(System.String)">
            <summary>
            Returns the field value cast as an integer
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetNumber(System.String)">
            <summary>
            Returns the field value cast as a number (double)
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetRowCount">
            <summary>
            Returns the number of rows in the result.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetSQL">
            <summary>
            returns the query used to generate the results
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetText(System.String)">
            <summary>
            Returns the result and converts it to a text type. For field types that store text in files, the text is returned instead of the filename. These include textfile, cssfile, javascriptfile. For file types that do not contain text, the filename is returned. These include filetype and imagefiletype.
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetHtml(System.String)">
            <summary>
            Returns the result of getText() after verifying it's content is valid for use in Html content. If the field is a fieldTypeHtml the content is returned without conversion. If the field is any other type, the content is HtmlEncoded first (> converted to &gt;, etc)
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GoNext">
            <summary>
            Move to the next record in a result set.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.NextOK">
            <summary>
            Move to the next record in a result set and return true if the row is valid.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.OK">
            <summary>
            Returns true if there is valid data in the current row of the result set.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.Save">
            <summary>
            Forces a save of any changes made to the current row. A save occurs automatically when the content set is closed or when it moves to another row.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.SetField(System.String,System.Object)">
            <summary>
            Sets a value in a field of the current row.
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.SetField(System.String,System.String)">
            <summary>
            Sets a value in a field of the current row.
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.SetField(System.String,System.Int32)">
            <summary>
            Sets a value in a field of the current row.
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.SetField(System.String,System.Boolean)">
            <summary>
            Sets a value in a field of the current row.
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.SetField(System.String,System.DateTime)">
            <summary>
            Sets a value in a field of the current row.
            </summary>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.SetFormInput(System.String,System.String)">
            <summary>
            Processes a value from the incoming request to a field in the current row.
            </summary>
            <param name="fieldName"></param>
            <param name="requestName"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.GetValue(System.String)">
            <summary>
            Return the value directly from the field, without the conversions associated with GetText().
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPCSBaseClass.Dispose">
            <summary>
            support IDisposable
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPDbBaseClass">
            <summary>
            CP.Db - This object references the database directly
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.CreateFieldPathFilename(System.String,System.String,System.Int32,Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum)">
            <summary>
            creates a pathFilename for a field that stores text content, like css, js, etc.
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="recordId"></param>
            <param name="fieldTypeId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.CreateUploadFieldPathFilename(System.String,System.String,System.Int32,System.String)">
            <summary>
            creates the pathFilename for a field that holds the path and filename of an uploaded file (Only type=file and type=image)
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="recordId"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.CreateUploadFieldPath(System.String,System.String,System.Int32)">
            <summary>
            creates a path for a field that holds the path and filename of an uploaded file (Only type=file and type=image)
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="recordId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.Add(System.String,System.Int32)">
            <summary>
            Add a record to a table in the default datasource and return its Id
            </summary>
            <param name="tableName"></param>
            <param name="createdByUserId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.Insert(System.String,System.Int32)">
            <summary>
            Add a record to a table and return the record in a datatable
            </summary>
            <param name="tableName"></param>
            <param name="createdByUserId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.Insert(System.String,System.Collections.Specialized.NameValueCollection,System.Int32)">
            <summary>
            Add a record to a table and return the record in a datatable
            </summary>
            <param name="tableName">The table to be inserted.</param>
            <param name="sqlList">NameValue pairs to be inserted. Name is the field name. Value is saved to the field, formatted for an sql statement according to the correct type. ex sqlList.Add("name", cp.db.EncodeSqlText("Bob Smith"))</param>
            <param name="createdByUserId">The user id to be set in the created-by and modified-by fields</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.Update(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            update records in a table. Criteria is an sql compatible where-clause, the sqlList is a list of fields and values to update
            </summary>
            <param name="tableName">The table to be updated.</param>
            <param name="criteria">Sql compatible where clause to select the record(s) that will be updated.</param>
            <param name="sqlList">NameValue pairs. Name is the field name. Value is saved to the field, formatted for an sql statement according to the correct type. ex sqlList.Add("name", cp.db.EncodeSqlText("Bob Smith"))</param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.Update(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            update records in a table. Criteria is an sql compatible where-clause, the sqlList is a list of fields and values to update. If Async is true, the query is queued for later
            </summary>
            <param name="tableName"></param>
            <param name="criteria"></param>
            <param name="sqlList"></param>
            <param name="Async"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.Delete(System.String,System.Int32)">
            <summary>
            Delete the record specified by tablename and recordId
            </summary>
            <param name="tableName"></param>
            <param name="recordId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.Delete(System.String,System.String)">
            <summary>
            Delete the record specified by tablename and guid
            </summary>
            <param name="tableName"></param>
            <param name="guid"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.DeleteRows(System.String,System.String)">
            <summary>
            Delete the record specified by tablename and guid
            </summary>
            <param name="tableName"></param>
            <param name="sqlCriteria"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.GetConnectionString">
            <summary>
            get the connection string for the default device 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.IsTable(System.String)">
            <summary>
            Return true if this is a valid database table in the current application
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.IsTableField(System.String,System.String)">
            <summary>
            Return true if this is a valid database field in a valid table in the current application
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.EncodeSQLBoolean(System.Boolean)">
            <summary>
            Encode a boolean value to be used in an sql Query for this application. Boolean fields are stored as integers in Contensive. Example 'select id from ccmembers where active='+EncodeSqlBoolean(true)
            </summary>
            <param name="sourceBoolean"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.EncodeSQLDate(System.DateTime)">
            <summary>
            Encode a date value to be used in an sql Query for this application. Example 'select id from ccmembers where dateadded>'+EncodeSqlDate( myBirthday )
            </summary>
            <param name="sourceDate"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.EncodeSQLNumber(System.Double)">
            <summary>
            Encode a numeric value (integer or double) to be used in an sql Query for this application. Example 'select id from orders where totalAmount>'+EncodeSqlNumber( 1000.00 )
            </summary>
            <param name="sourceNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.EncodeSQLNumber(System.Int32)">
            <summary>
            Encode a numeric value (integer or double) to be used in an sql Query for this application. Example 'select id where id>'+EncodeSqlNumber( 1000 )
            </summary>
            <param name="sourceNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.EncodeSQLText(System.String)">
            <summary>
            Encode a text string value to be used in an sql Query for this application. Example 'select id where name='+EncodeSqlText( 'bob' )
            </summary>
            <param name="sourceText"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.EncodeSQLTextLike(System.String)">
            <summary>
            Encode a text string value to be used in an sql Query for this application. Example 'select id where name like '+EncodeSqlText( 'bob' )
            </summary>
            <param name="sourceText"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteQuery(System.String,System.Int32,System.Int32)">
            <summary>
            Execute a query and return a datatable.
            </summary>
            <param name="sql"></param>
            <param name="startRecord">0 based start record</param>
            <param name="maxRecords"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteQuery(System.String,System.Int32)">
            <summary>
            Execute an sql query and return a datatable. Max records returned is 10M. 
            </summary>
            <param name="sql"></param>
            <param name="startRecord">0 based start record</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteQuery(System.String)">
            <summary>
            Execute an sql query and return a datatable. Start at record 0,  max records returned is 10M. 
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteNonQuery(System.String,System.Int32@)">
            <summary>
            Execute an sql command on a specific datasource. No data is returned.
            </summary>
            <param name="sql"></param>
            <param name="recordsAffected"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteNonQuery(System.String)">
            <summary>
            Execute an sql command on a specific datasource. No data is returned.
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteNonQueryAsync(System.String)">
            <summary>
            Execute an sql command on a specific datasource, dotnet async task pattern.
            </summary>
            <param name="sql"></param>
        </member>
        <member name="P:Contensive.BaseClasses.CPDbBaseClass.SQLTimeout">
            <summary>
            get or set the timeout in seconds for all Db methods in the current process
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.GetRemoteQueryKey(System.String,System.Int32)">
            <summary>
            To give a remote method the ability to run an arbitrary query, store it as a remote query and executeRemoteQuery()
            </summary>
            <param name="sql"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.GetRemoteQueryKey(System.String)">
            <summary>
            To give a remote method the ability to run an arbitrary query, store it as a remote query and executeRemoteQuery()
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteRemoteQuery(System.String)">
            <summary>
            Execute a sql query stored with getRemoteQueryKey.
            </summary>
            <param name="remoteQueryKey"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.Dispose">
            <summary>
            Support disposable for non-default datasources
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteSQL(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="SQL"></param>
            <param name="DataSourcename"></param>
            <param name="Retries"></param>
            <param name="PageSize"></param>
            <param name="PageNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteSQL(System.String,System.String,System.String,System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="SQL"></param>
            <param name="DataSourcename"></param>
            <param name="Retries"></param>
            <param name="PageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteSQL(System.String,System.String,System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="SQL"></param>
            <param name="DataSourcename"></param>
            <param name="Retries"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteSQL(System.String,System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="SQL"></param>
            <param name="DataSourcename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteSQL(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="SQL"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.DbGetConnectionString(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="DataSourcename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.DbGetDataSourceType(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="DataSourcename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.DbGetTableID(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="TableName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.DbIsTable(System.String,System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="DataSourcename"></param>
            <param name="TableName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.DbIsTableField(System.String,System.String,System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="DataSourcename"></param>
            <param name="TableName"></param>
            <param name="FieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.GetTableID(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.GetDataSourceType(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="DataSourcename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deprecated
            </summary>
            <param name="dataSourcename"></param>
            <param name="tableName"></param>
            <param name="recordId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.GetConnectionString(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="dataSourcename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.IsTable(System.String,System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="dataSourcename"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.IsTableField(System.String,System.String,System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="dataSourcename"></param>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteQuery(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Deprecated
            </summary>
            <param name="sql"></param>
            <param name="dataSourceName"></param>
            <param name="startRecord"></param>
            <param name="maxRecords"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteQuery(System.String,System.String,System.Int32)">
            <summary>
            Deprecated
            </summary>
            <param name="sql"></param>
            <param name="dataSourceName"></param>
            <param name="startRecord"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteQuery(System.String,System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="sql"></param>
            <param name="dataSourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteNonQuery(System.String,System.String,System.Int32@)">
            <summary>
            Deprecated
            </summary>
            <param name="sql"></param>
            <param name="dataSourceName"></param>
            <param name="recordsAffected"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteNonQuery(System.String,System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="sql"></param>
            <param name="dataSourceName"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.ExecuteNonQueryAsync(System.String,System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="sql"></param>
            <param name="dataSourceName"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.GetRemoteQueryKey(System.String,System.String,System.Int32)">
            <summary>
            Deprecated
            </summary>
            <param name="sql"></param>
            <param name="DataSourceName"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.GetRemoteQueryKey(System.String,System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="sql"></param>
            <param name="DataSourceName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.CreateFieldPathFilename(System.String,System.String,System.Int32,Contensive.BaseClasses.CPContentBaseClass.fileTypeIdEnum)">
            <summary>
            Deprecated
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="recordId"></param>
            <param name="fieldType"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.CreateUploadFieldPathFilename(System.String,System.String,System.Int32,System.String,Contensive.BaseClasses.CPContentBaseClass.fileTypeIdEnum)">
            <summary>
            Deprecated
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="recordId"></param>
            <param name="filename"></param>
            <param name="fileType"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDbBaseClass.CreateUploadFieldPathFilename(System.String,System.String,System.Int32,System.String,Contensive.BaseClasses.CPContentBaseClass.FieldTypeIdEnum)">
            <summary>
            Deprecated
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="recordId"></param>
            <param name="filename"></param>
            <param name="fieldTypeId"></param>
            <returns></returns>
        </member>
        <member name="T:Contensive.BaseClasses.CPDocBaseClass">
            <summary>
            The document being constructed
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPDocBaseClass.HtmlAssetTypeEnum">
            <summary>
            Types of assets for htmlAsset.assetType property, like script or style
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPDocBaseClass.HtmlAssetTypeEnum.script">
            <summary>
            script at end of body (code or link)
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPDocBaseClass.HtmlAssetTypeEnum.style">
            <summary>
            css style at end of body (code or link)
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPDocBaseClass.HtmlAssetTypeEnum.scriptOnLoad">
            <summary>
            special case, text is assumed to be script to run on load
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPDocBaseClass.HtmlAssetClass">
            <summary>
            assets to be added to the head section (and end-of-body) of html documents
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.HtmlAssetClass.assetType">
            <summary>
            the type of asset, css, js, etc
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.HtmlAssetClass.inHead">
            <summary>
            if true, asset goes in head else it goes at end of body
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.HtmlAssetClass.isLink">
            <summary>
            if true, the content property is a link to the asset, else use the content as the asset
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.HtmlAssetClass.content">
            <summary>
            either link or content depending on the isLink property
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.HtmlAssetClass.addedByMessage">
            <summary>
            message used during debug to show where the asset came from
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.HtmlAssetClass.sourceAddonId">
            <summary>
            if this asset was added from an addon, this is the addonId.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.HtmlAssetClass.canBeMerged">
            <summary>
            If true, this asset can can be merged with other similar documents
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.HtmlAssetList">
            <summary>
            assets like scripts and styles included in this document
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.NoFollow">
            <summary>
            sets the html head nofollow meta tag signaling spidering bots not to follow links on this document
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.PageId">
            <summary>
            The page id for this document
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.PageName">
            <summary>
            The name of the page referenced by .PageId
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.RefreshQueryString">
            <summary>
            Use this querystring to create a link that if clicked by a user will return the user to the current page + addon
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.StartTime">
            <summary>
            The datetime when this document was started
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.TemplateId">
            <summary>
            The id of the template referenced by this document
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.Type">
            <summary>
            Get the html DOCTYPE declaration for this document
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddHeadStyle(System.String)">
            <summary>
            Add a stylesheet (not a link to a stylesheet) to the assets for this document. Do NOT include style tags
            </summary>
            <param name="styleSheet"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddHeadStyleLink(System.String)">
            <summary>
            Add a link to a stylesheet to the assets for this document.
            </summary>
            <param name="styleSheetLink"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddHeadJavascript(System.String)">
            <summary>
            Add javascript (not a link to javascript) to the assets for the Head of this document. Do NOT include script tags.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddHeadJavascriptLink(System.String)">
            <summary>
            Add a link to a javascript file to the assets for the Head of this document.
            </summary>
            <param name="codeLink"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddBodyJavascript(System.String)">
            <summary>
            Add javascript (not a link to javascript) to the assets for the end-of-body of this document. Do NOT include script tags.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddBodyJavascriptLink(System.String)">
            <summary>
            Add a link to a javascript file to the assets for the end-of-body of this document.
            </summary>
            <param name="codeLink"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddHeadTag(System.String)">
            <summary>
            Add a tag to the head of this document
            </summary>
            <param name="htmlTag"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddMetaDescription(System.String)">
            <summary>
            Add to the head's meta description tag
            </summary>
            <param name="metaDescription"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddMetaKeywordList(System.String)">
            <summary>
            Add to the head's meta keyword  tag
            </summary>
            <param name="metaKeywordList"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddOnLoadJavascript(System.String)">
            <summary>
            Add javascript code to be run on load.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddTitle(System.String)">
            <summary>
            Add to the document's title
            </summary>
            <param name="pageTitle"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddBodyEnd(System.String)">
            <summary>
            Add html to the end-of-body
            </summary>
            <param name="html"></param>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.Body">
            <summary>
            The html body of the document valid only during end-of-body addon event. Use this property to modify the body after rendering
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.SetProperty(System.String,System.String)">
            <summary>
            Set document property, valid only during this document rendering
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.SetProperty(System.String,System.Boolean)">
            <summary>
            Set document property, valid only during this document rendering
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.SetProperty(System.String,System.Int32)">
            <summary>
            Set document property, valid only during this document rendering
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.SetProperty(System.String,System.DateTime)">
            <summary>
            Set document property, valid only during this document rendering
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.SetProperty(System.String,System.Double)">
            <summary>
            Set document property, valid only during this document rendering
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.GetProperty(System.String,System.String)">
            <summary>
            Get document property previously set during this document rendering. GetProperty is the same as GetText
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.GetProperty(System.String)">
            <summary>
            Get document property previously set during this document rendering. Get document property previously set during this document rendering
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.GetText(System.String,System.String)">
            <summary>
            Get document property previously set during this document rendering.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.GetText(System.String)">
            <summary>
            Get document property previously set during this document rendering.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.GetBoolean(System.String,System.Boolean)">
            <summary>
            Get document property previously set during this document rendering.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.GetBoolean(System.String)">
            <summary>
            Get document property previously set during this document rendering.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.GetDate(System.String,System.DateTime)">
            <summary>
            Get document property previously set during this document rendering.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.GetDate(System.String)">
            <summary>
            Get document property previously set during this document rendering.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.GetInteger(System.String,System.Int32)">
            <summary>
            Get document property previously set during this document rendering.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.GetInteger(System.String)">
            <summary>
            Get document property previously set during this document rendering.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.GetNumber(System.String,System.Double)">
            <summary>
            Get document property previously set during this document rendering.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.GetNumber(System.String)">
            <summary>
            Get document property previously set during this document rendering.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.IsProperty(System.String)">
            <summary>
            Determine if a key has already been set in this document.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPDocBaseClass.IsAdminSite">
            <summary>
            True if the document is being created within the admin site
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddRefreshQueryString(System.String,System.String)">
            <summary>
            Add a key=value to the current refresh query string. Set .RefreshQueryString property for details.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddRefreshQueryString(System.String,System.Int32)">
            <summary>
            Add a key=value to the current refresh query string. Set .RefreshQueryString property for details.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddRefreshQueryString(System.String,System.Double)">
            <summary>
            Add a key=value to the current refresh query string. Set .RefreshQueryString property for details.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddRefreshQueryString(System.String,System.Boolean)">
            <summary>
            Add a key=value to the current refresh query string. Set .RefreshQueryString property for details.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPDocBaseClass.AddRefreshQueryString(System.String,System.DateTime)">
            <summary>
            Add a key=value to the current refresh query string. Set .RefreshQueryString property for details.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Contensive.BaseClasses.CPEmailBaseClass">
            <summary>
            Methods to send and manage email.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPEmailBaseClass.fromAddressDefault">
            <summary>
            Returns the site's default email from address
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.send(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Sends an email to an email address. Return false if the email could not be sent
            </summary>
            <param name="toAddress"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
            <param name="bodyIsHTML"></param>
            <param name="userErrorMessage"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.send(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends an email to an email address. Return false if the email could not be sent
            </summary>
            <param name="toAddress"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
            <param name="bodyIsHTML"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.send(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email to an email address. Return false if the email could not be sent
            </summary>
            <param name="toAddress"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.send(System.String,System.String,System.String,System.String)">
            <summary>
            Sends an email to an email address. Return false if the email could not be sent
            </summary>
            <param name="toAddress"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendForm(System.String,System.String,System.String,System.String@)">
            <summary>
            Sends an email that includes all the form elements in the current webpage response.
            </summary>
            <param name="toAddress"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="userErrorMessage"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendForm(System.String,System.String,System.String)">
            <summary>
            Sends an email that includes all the form elements in the current webpage response.
            </summary>
            <param name="toAddress"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendPassword(System.String,System.String@)">
            <summary>
            Send a list of usernames and passwords to the account(s) that include the given email address. If false, the email could not be sent.
            </summary>
            <param name="userEmailAddress"></param>
            <param name="userErrorMessage"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendPassword(System.String)">
            <summary>
            Send a list of usernames and passwords to the account(s) that include the given email address. If false, the email could not be sent.
            </summary>
            <param name="userEmailAddress"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendSystem(System.String,System.String,System.Int32,System.String@)">
            <summary>
            Send a system email record. If the EmailIdOrName field contains a number, it is assumed first to be an Id. If false, the email could not be sent
            </summary>
            <param name="emailName"></param>
            <param name="additionalCopy"></param>
            <param name="additionalUserID"></param>
            <param name="userErrorMessage"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendSystem(System.String,System.String,System.Int32)">
            <summary>
            Send a system email record. If the EmailIdOrName field contains a number, it is assumed first to be an Id. If false, the email could not be sent
            </summary>
            <param name="emailName"></param>
            <param name="additionalCopy"></param>
            <param name="additionalUserID"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendSystem(System.String,System.String)">
            <summary>
            Send a system email record. If the EmailIdOrName field contains a number, it is assumed first to be an Id. If false, the email could not be sent
            </summary>
            <param name="emailName"></param>
            <param name="additionalCopy"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendSystem(System.String)">
            <summary>
            Send a system email record. If the EmailIdOrName field contains a number, it is assumed first to be an Id. If false, the email could not be sent
            </summary>
            <param name="emailName"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendSystem(System.Int32,System.String,System.Int32,System.String@)">
            <summary>
            Send a system email record. If the EmailIdOrName field contains a number, it is assumed first to be an Id. If false, the email could not be sent
            </summary>
            <param name="emailId"></param>
            <param name="additionalCopy"></param>
            <param name="additionalUserID"></param>
            <param name="userErrorMessage"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendSystem(System.Int32,System.String,System.Int32)">
            <summary>
            Send a system email record. If the EmailIdOrName field contains a number, it is assumed first to be an Id. If false, the email could not be sent
            </summary>
            <param name="emailId"></param>
            <param name="additionalCopy"></param>
            <param name="additionalUserID"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendSystem(System.Int32,System.String)">
            <summary>
            Send a system email record. If the EmailIdOrName field contains a number, it is assumed first to be an Id. If false, the email could not be sent
            </summary>
            <param name="emailId"></param>
            <param name="additionalCopy"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendSystem(System.Int32)">
            <summary>
            Send a system email record. If the EmailIdOrName field contains a number, it is assumed first to be an Id. If false, the email could not be sent
            </summary>
            <param name="emailId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Sends an email to everyone in a group. (legacy support: if groupName is a valid guid it is assumed to be)
            </summary>
            <param name="groupName"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
            <param name="bodyIsHTML"></param>
            <param name="userErrorMessage"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends an email to everyone in a group. (legacy support: if groupName is a valid guid it is assumed to be)
            </summary>
            <param name="groupName"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
            <param name="bodyIsHTML"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email to everyone in a group. (legacy support: if groupName is a valid guid it is assumed to be)
            </summary>
            <param name="groupName"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.String,System.String,System.String,System.String)">
            <summary>
            Sends an email to everyone in a group. (legacy support: if groupName is a valid guid it is assumed to be)
            </summary>
            <param name="groupName"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Sends an email to everyone in a group.
            </summary>
            <param name="groupId"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
            <param name="bodyIsHTML"></param>
            <param name="userErrorMessage"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends an email to everyone in a group.
            </summary>
            <param name="groupId"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
            <param name="bodyIsHTML"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email to everyone in a group.
            </summary>
            <param name="groupId"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.Int32,System.String,System.String,System.String)">
            <summary>
            Sends an email to everyone in a group.
            </summary>
            <param name="groupId"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Sends an email to everyone in a list of groups.
            </summary>
            <param name="groupNameList"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
            <param name="bodyIsHTML"></param>
            <param name="userErrorMessage"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends an email to everyone in a list of groups.
            </summary>
            <param name="groupNameList"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
            <param name="bodyIsHTML"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email to everyone in a list of groups.
            </summary>
            <param name="groupNameList"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.Collections.Generic.List{System.String},System.String,System.String,System.String)">
            <summary>
            Sends an email to everyone in a list of groups.
            </summary>
            <param name="groupNameList"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.Collections.Generic.List{System.Int32},System.String,System.String,System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Sends an email to everyone in a list of groups.
            </summary>
            <param name="groupIdList"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
            <param name="bodyIsHTML"></param>
            <param name="userErrorMessage"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.Collections.Generic.List{System.Int32},System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sends an email to everyone in a list of groups.
            </summary>
            <param name="groupIdList"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
            <param name="bodyIsHTML"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.Collections.Generic.List{System.Int32},System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email to everyone in a list of groups.
            </summary>
            <param name="groupIdList"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendGroup(System.Collections.Generic.List{System.Int32},System.String,System.String,System.String)">
            <summary>
            Sends an email to everyone in a list of groups.
            </summary>
            <param name="groupIdList"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendUser(System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String@)">
            <summary>
            Send an email a user.
            </summary>
            <param name="toUserId"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
            <param name="bodyIsHTML"></param>
            <param name="userErrorMessage"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendUser(System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Send an email a user.
            </summary>
            <param name="toUserId"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
            <param name="bodyIsHTML"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendUser(System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Send an email a user.
            </summary>
            <param name="toUserId"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="sendImmediately"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendUser(System.Int32,System.String,System.String,System.String)">
            <summary>
            Send an email a user.
            </summary>
            <param name="toUserId"></param>
            <param name="fromAddress"></param>
            <param name="subject"></param>
            <param name="body"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.validateEmail(System.String)">
            <summary>
            Send an email a user.
            </summary>
            <param name="toAddress"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.validateUserEmail(System.Int32)">
            <summary>
            Validate a user email
            </summary>
            <param name="toUserId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendUser(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            use setUser with argument int toUserId
            </summary>
            <param name="ToUserID"></param>
            <param name="FromAddress"></param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <param name="SendImmediately"></param>
            <param name="BodyIsHTML"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendUser(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            use setUser with argument int toUserId
            </summary>
            <param name="ToUserID"></param>
            <param name="FromAddress"></param>
            <param name="Subject"></param>
            <param name="Body"></param>
            <param name="SendImmediately"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPEmailBaseClass.sendUser(System.String,System.String,System.String,System.String)">
            <summary>
            use setUser with argument int toUserId
            </summary>
            <param name="ToUserID"></param>
            <param name="FromAddress"></param>
            <param name="Subject"></param>
            <param name="Body"></param>
        </member>
        <member name="T:Contensive.BaseClasses.CPFileBaseClass">
            <summary>
            This class has been deprecated. use cp.CdnFiles, cp.PrivateFiles, cp.WwwFiles, or cp.TempFiles instead.
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.AppendVirtual(System.String,System.String)">
            <summary>
            Append content to a text file in the content files. If the file does not exist it will be created.
            </summary>
            <param name="Filename">The filename of the file to be appended. May include subfolders in the content file area. It should not include a leading slash. Folder slashes should be \.</param>
            <param name="FileContent">Test appended to the file</param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.CopyVirtual(System.String,System.String)">
            <summary>
            Copies a file in the content file area to another. If the destination does not exist it is created. Filenames may include subfolders but should not include a leading slash.
            </summary>
            <param name="SourceFilename"></param>
            <param name="DestinationFilename"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.CreateFolder(System.String)">
            <summary>
            Create a folder given a physical folder path.
            </summary>
            <param name="FolderPath"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.Delete(System.String)">
            <summary>
            Delete a file within the file space.
            </summary>
            <param name="Filename"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.DeleteFolder(System.String)">
            <summary>
            Delete a folder within the file space
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.DeleteVirtual(System.String)">
            <summary>
            Delete a file in the content file area. The filename may contain subfolders and should not begin with a leading slash.
            </summary>
            <param name="Filename"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.Read(System.String)">
            <summary>
            Read a text file within the file space.
            </summary>
            <param name="Filename"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.ReadVirtual(System.String)">
            <summary>
            Read a text file in the content file area. The filename may contain subfolders and should not begin with a leading slash.
            </summary>
            <param name="Filename"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.Save(System.String,System.String)">
            <summary>
            Save or create a text file within the file space.
            </summary>
            <param name="Filename"></param>
            <param name="FileContent"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.SaveVirtual(System.String,System.String)">
            <summary>
            Save a text file in the content file area. The filename may contain subfolders and should not begin with a leading slash.
            </summary>
            <param name="Filename"></param>
            <param name="FileContent"></param>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.fileList(System.String,System.Int32,System.Int32)">
            <summary>
            Get a crlf delimited list of files in a given path. Each row is a tab delimited list of attributes for each file. The attributes are:
            Name
            Attributes
            DateCreated
            DateLastAccessed
            DateLastModified
            Size
            Type
            </summary>
            <param name="folderName"></param>
            <param name="pageSize"></param>
            <param name="pageNumber"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.fileList(System.String,System.Int32)">
            <summary>
            Get a crlf delimited list of files in a given path. Each row is a tab delimited list of attributes for each file. The attributes are:
            </summary>
            <param name="folderName"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.fileList(System.String)">
            <summary>
            Get a crlf delimited list of files in a given path. Each row is a tab delimited list of attributes for each file. The attributes are:
            </summary>
            <param name="folderName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.folderList(System.String)">
            <summary>
            Get a crlf delimited list of folders in a given path. Each row is a tab delimited list of attributes for each folder. The attributes are:
            Name
            Attributes
            DateCreated
            DateLastAccessed
            DateLastModified
            Type
            </summary>
            <param name="folderName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.fileExists(System.String)">
            <summary>
            Returns true if a file exists
            </summary>
            <param name="pathFileName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.folderExists(System.String)">
            <summary>
            Returns true if a folder exists
            </summary>
            <param name="folderName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileBaseClass.getVirtualFileLink(System.String)">
            <summary>
            Returns a URL to a file in the File.cdn store
            </summary>
            <param name="virtualFilename"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPFileSystemBaseClass.PhysicalFilePath">
            <summary>
            The physical file path of the local storage for this resource
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPFileSystemBaseClass.FileDetail">
            <summary>
            argument details for file and folder methods
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPFileSystemBaseClass.FileDetail.Name">
            <summary>
            file name
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPFileSystemBaseClass.FileDetail.Attributes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPFileSystemBaseClass.FileDetail.DateCreated">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPFileSystemBaseClass.FileDetail.DateLastAccessed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPFileSystemBaseClass.FileDetail.DateLastModified">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPFileSystemBaseClass.FileDetail.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPFileSystemBaseClass.FileDetail.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPFileSystemBaseClass.FileDetail.Extension">
            <summary>
            
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPFileSystemBaseClass.FolderDetail">
            <summary>
            argument details for file and folder methods
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.Append(System.String,System.String)">
            <summary>
            Append content to end of a text file
            </summary>
            <param name="filename"></param>
            <param name="fileContent"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.Copy(System.String,System.String)">
            <summary>
            Copy a file within the same filesystem (TempFiles, cndFiles, wwwFiles, privateFiles)
            </summary>
            <param name="sourcePathFilename"></param>
            <param name="destinationPathFilename"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.Copy(System.String,System.String,Contensive.BaseClasses.CPFileSystemBaseClass)">
            <summary>
            Copy a file to a different filesystem (TempFiles, cndFiles, wwwFiles, privateFiles)
            </summary>
            <param name="sourcePathFilename"></param>
            <param name="destinationPathFilename"></param>
            <param name="destinationFileSystem"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.CopyPath(System.String,System.String)">
            <summary>
            Recursively copy all files in a path to a path the same filesystem (TempFiles, cndFiles, wwwFiles, privateFiles). A path is either blank or begins with a folder name and ends with '\'. Valid sample paths are '', 'MyFolder\SubFolder\'
            </summary>
            <param name="sourcePath"></param>
            <param name="destinationPath"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.CopyPath(System.String,System.String,Contensive.BaseClasses.CPFileSystemBaseClass)">
            <summary>
            Recursively copy all files in a path to a path in a different filesystem (TempFiles, cndFiles, wwwFiles, privateFiles). A path is either blank or begins with a folder name and ends with '\'. Valid sample paths are '', 'MyFolder\SubFolder\'
            </summary>
            <param name="sourcePath"></param>
            <param name="destinationPath"></param>
            <param name="destinationFileSystem"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.CopyLocalToRemote(System.String)">
            <summary>
            Copy a file from the local storage to its remote store
            </summary>
            <param name="pathFilename"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.CopyRemoteToLocal(System.String)">
            <summary>
            Copy a file from the remote storate to its local store.
            </summary>
            <param name="pathFilename">The path followed by the filename. Path arguments have no leading slash, but they include a trailing slash. ex ParentFolder/SubFolder/Filename.ext</param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.CreateFolder(System.String)">
            <summary>
            Create a folder in a path. 
            </summary>
            <param name="pathFolder">A path followed by a folder name. (ex ParentFolder/SubFolder/NewFolderName ) Path arguments should have no leading slash.</param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.CreateUniqueFolder">
            <summary>
            Create a folder with a unique name. Return the path to the new folder. (Path values have no leading slash, and have a trailing slash, ex NewPath/ )
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.DeleteFile(System.String)">
            <summary>
            Delete a file in a path. Path arguments should have no leading slash. (ex ParentFolder/FileToDelete.txt )
            </summary>
            <param name="pathFilename"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.DeleteFolder(System.String)">
            <summary>
            Delete a folder and all files and subfolders. Path arguments should have no leading slash. (ex ParentFolder/FolderToDelete )
            </summary>
            <param name="folderPath"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.Read(System.String)">
            <summary>
            Read a text file. Path arguments should have no leading slash. (ex ParentFolder/FileToRead.txt )
            </summary>
            <param name="pathFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.ReadBinary(System.String)">
            <summary>
            Read a file to a byte array. Path arguments should have no leading slash. (ex ParentFolder/FileToRead.bin )
            </summary>
            <param name="pathFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.Save(System.String,System.String)">
            <summary>
            Save content to a text file. Path arguments should have no leading slash. (ex ParentFolder/FileToSave.txt )
            </summary>
            <param name="pathFilename"></param>
            <param name="fileContent"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.SaveBinary(System.String,System.Byte[])">
            <summary>
            Save a byte array to a file. Path arguments should have no leading slash. (ex ParentFolder/FileToSave.bin )
            </summary>
            <param name="pathFilename"></param>
            <param name="fileContent"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.FileList(System.String,System.Int32,System.Int32)">
            <summary>
            Get the details of all files in a folder. Path arguments should have no leading slash. (ex ParentFolder/FolderName )
            </summary>
            <param name="folderPath"></param>
            <param name="pageSize"></param>
            <param name="pageNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.FileDetails(System.String)">
            <summary>
            Get the details of a file. Returns null if the file is not found. Path arguments should have no leading slash. (ex ParentFolder/FileName.ext )
            </summary>
            <param name="PathFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.FolderList(System.String)">
            <summary>
            Get the details of all folders in a path. Path arguments should have no leading slash. (ex ParentFolder )
            </summary>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.FileExists(System.String)">
            <summary>
            Returns true if a file exists in this path
            </summary>
            <param name="pathFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.FolderExists(System.String)">
            <summary>
            Returns true if a folder exists in this path
            </summary>
            <param name="folderName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.SaveUpload(System.String,System.String@)">
            <summary>
            Handle a file upload from a submitted post to the /upload path. If successful, return true and the filename.
            </summary>
            <param name="htmlformName"></param>
            <param name="returnFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.SaveUpload(System.String,System.String,System.String@)">
            <summary>
            Handle a file upload to a path from a submitted post. If successful, return true and the filename.
            </summary>
            <param name="htmlFormName"></param>
            <param name="folderPath"></param>
            <param name="returnFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.GetPath(System.String)">
            <summary>
            Returns the path of a pathFilename argument. For example "folder1/folder2/file.txt" returns "folder1/folder2/"
            </summary>
            <param name="pathFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.GetFilename(System.String)">
            <summary>
            Returns the path of a pathFilename argument. For example "folder1/folder2/file.txt" returns "file.txt"
            </summary>
            <param name="pathFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.ZipPath(System.String,System.String)">
            <summary>
            Create a zip file and add all the files in a path recursively
            </summary>
            <param name="archivePathFilename"></param>
            <param name="path"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.UnzipFile(System.String)">
            <summary>
            unzip a zip file to a folder with the same name
            </summary>
            <param name="pathFilename"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.SaveHttpGet(System.String,System.String)">
            <summary>
            Get url to a text file
            </summary>
            <param name="pathFilename"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.SaveHttpPost(System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Post key/values to  a url and save to text file
            </summary>
            <param name="pathFilename"></param>
            <param name="url"></param>
            <param name="requestArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPFileSystemBaseClass.SaveHttpPost(System.String,System.String,System.String)">
            <summary>
            post entity to a url and save to text file
            </summary>
            <param name="pathFilename"></param>
            <param name="url"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:Contensive.BaseClasses.CPGroupBaseClass">
            <summary>
            Methods and Properties for Groups
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.Add(System.String)">
            <summary>
            Add a new group
            </summary>
            <param name="groupName"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.Add(System.String,System.String)">
            <summary>
            Add a new group
            </summary>
            <param name="groupName"></param>
            <param name="groupCaption"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.AddUser(System.Int32)">
            <summary>
            Add the current user to a group.
            </summary>
            <param name="groupId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.AddUser(System.String)">
            <summary>
            Add the current user to a group. If argument is numeric, record is referenced by Id. If argument is guid, record is referenced by ccGuid. Otherwise argument is name.
            </summary>
            <param name="groupNameIdOrGuid"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.AddUser(System.String,System.Int32)">
            <summary>
            Add a user to a group. If argument is numeric, record is referenced by Id. If argument is guid, record is referenced by ccGuid. Otherwise argument is name.
            </summary>
            <param name="groupNameIdOrGuid"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.AddUser(System.String,System.Int32,System.DateTime)">
            <summary>
            Add a user to a group. If argument is numeric, record is referenced by Id. If argument is guid, record is referenced by ccGuid. Otherwise argument is name.
            </summary>
            <param name="groupNameIdOrGuid"></param>
            <param name="userId"></param>
            <param name="dateExpires"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.AddUser(System.Int32,System.Int32)">
            <summary>
            Add a user to a group.
            </summary>
            <param name="groupId"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.AddUser(System.Int32,System.Int32,System.DateTime)">
            <summary>
            Add a user to a group.
            </summary>
            <param name="groupId"></param>
            <param name="userId"></param>
            <param name="dateExpires"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.Delete(System.String)">
            <summary>
            Delete a group. If argument is numeric, record is referenced by Id. If argument is guid, record is referenced by ccGuid. Otherwise argument is name.
            </summary>
            <param name="groupNameIdOrGuid"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.Delete(System.Int32)">
            <summary>
            Delete a group.
            </summary>
            <param name="groupId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.GetId(System.String)">
            <summary>
            Get a group Id. If argument is guid, record is referenced by ccGuid. Otherwise argument is name.
            </summary>
            <param name="groupNameOrGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.GetName(System.String)">
            <summary>
            Get a group name. If argument is numeric, record is referenced by Id. Otherwise record is referenced by ccGuid.
            </summary>
            <param name="GroupIdOrGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.GetName(System.Int32)">
            <summary>
            Get a group Name
            </summary>
            <param name="groupId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.RemoveUser(System.String)">
            <summary>
            Remove the current user from a group
            </summary>
            <param name="groupNameOrGuid"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.RemoveUser(System.Int32)">
            <summary>
            Remove the current user from a group
            </summary>
            <param name="groupId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.RemoveUser(System.String,System.Int32)">
            <summary>
            Remove a user from a group
            </summary>
            <param name="groupNameOrGuid"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPGroupBaseClass.RemoveUser(System.Int32,System.Int32)">
            <summary>
            Remove a user from a group
            </summary>
            <param name="groupId"></param>
            <param name="userId"></param>
        </member>
        <member name="T:Contensive.BaseClasses.CPHtml5BaseClass.EditorContentType">
            <summary>
            The type of content being edited with the html editor. Used to determine types of addons that can be included
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPHtml5BaseClass.EditorUserRole">
            <summary>
            The role of the user
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPHtml5BaseClass.Form(System.String,Contensive.CPBase.BaseModels.HtmlAttributesForm)">
            <summary>
            Form tag
            </summary>
            <param name="innerHtml"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPHtml5BaseClass.Form(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Form tag
            </summary>
            <param name="innerHtml"></param>
            <param name="htmlName"></param>
            <param name="htmlClass"></param>
            <param name="htmlId"></param>
            <param name="actionQueryString"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPHtml5BaseClass.Form(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Form tag
            </summary>
            <param name="innerHtml"></param>
            <param name="htmlName"></param>
            <param name="htmlClass"></param>
            <param name="htmlId"></param>
            <param name="actionQueryString"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPHtml5BaseClass.Form(System.String,System.String,System.String,System.String)">
            <summary>
            Form tag
            </summary>
            <param name="innerHtml"></param>
            <param name="htmlName"></param>
            <param name="htmlClass"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPHtml5BaseClass.Form(System.String,System.String,System.String)">
            <summary>
            Form tag
            </summary>
            <param name="innerHtml"></param>
            <param name="htmlName"></param>
            <param name="htmlClass"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPHtml5BaseClass.Form(System.String,System.String)">
            <summary>
            Form tag
            </summary>
            <param name="innerHtml"></param>
            <param name="htmlName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPHtml5BaseClass.Form(System.String)">
            <summary>
            Form tag
            </summary>
            <param name="innerHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPHtml5BaseClass.A(System.String,Contensive.CPBase.BaseModels.HtmlAttributesA)">
            <summary>
            Anchore tag
            </summary>
            <param name="innerHtml"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPHtml5BaseClass.CheckList(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            A list of checkboxes representing a many to many relationship. Process input with ProcessChecklist
            </summary>
            <param name="htmlName"></param>
            <param name="primaryContentName">The table being presented. ex. a list of groups that a person may join, this is the People content.</param>
            <param name="primaryRecordId">The id of the record in the primary content. ex. a list of groups that a person may join, this is the peraon's id.</param>
            <param name="secondaryContentName">The table being related. ex. a list of groups that a person may join, this is the group content.</param>
            <param name="rulesContentName">The table holding the relationship in a many to many connection. ex. a list of groups that a person may join, this is a table with a personid and a groupId.</param>
            <param name="rulesPrimaryFieldname">The field in the relationship table that identifies the record in the primary content. ex. a list of groups that a person may join, this the field in the raltionship table that points to the person record, like personId.</param>
            <param name="rulesSecondaryFieldName">The field in the relationship table that identifies the record in the secondary content. ex. a list of groups that a person may join, this the field in the raltionship table that points to the group record, like groupId.</param>
            <param name="secondaryContentSelectSQLCriteria">The checklist includes all the possible rlationships of the secondary content to the primary. This is the criteria part of a query (where clause) that limits the selection. ex. a list of groups that a person may join, this criteria limits the groups listed for a person to join, like only that tah ae enabled.</param>
            <param name="captionFieldName"></param>
            <param name="isReadOnly"></param>
            <param name="htmlClass"></param>
            <param name="htmlId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPHtml5BaseClass.ProcessCheckList(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Process and input checklist
            </summary>
            <param name="htmlName"></param>
            <param name="primaryContentName"></param>
            <param name="primaryRecordID"></param>
            <param name="secondaryContentName"></param>
            <param name="rulesContentName"></param>
            <param name="rulesPrimaryFieldname"></param>
            <param name="rulesSecondaryFieldName"></param>
        </member>
        <member name="T:Contensive.BaseClasses.CPHtmlBaseClass.EditorContentScope">
            <summary>
            The type of content being edited with the html editor. Used to determine types of addons that can be included
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPHtmlBaseClass.EditorUserScope">
            <summary>
            The role of the user
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPHttpBaseClass">
            <summary>
            Helper methods to perform common http requests
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPHttpBaseClass.Get(System.String)">
            <summary>
            Get url to a string. Use file objects to save to file
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPHttpBaseClass.Post(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Post key/values to  a url. Use file objects to save to file
            </summary>
            <param name="url"></param>
            <param name="requestArguments"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPHttpBaseClass.Post(System.String)">
            <summary>
            post entity to a url. Use file objects to save to file
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPHttpBaseClass.CdnFilePathPrefix">
            <summary>
            The prefix used with database file field types to create a file link. Use to create links used on the website. For links in resources outside the websie like email, RSS, etc use FilePathAbsolute().
            For example, the file record may contain cctablename\imagefilename\000000000001\myPhoto.jpg,
            this method might return /files/mysite/ if the file system is local (files on the webserver),
            or it might return https://myCdnSource.com/publicfiles/ if the application is setup for remote files, and this is the cdn
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPHttpBaseClass.CdnFilePathPrefixAbsolute">
            <summary>
            The prefix added to database file-field types to create a file link. Use to create links in resources outside the website like email and rss.
            For example, the file record may contain cctablename\imagefilename\000000000001\myPhoto.jpg,
            this method might return https://www.mywebsite.com/files/mysite/ if the filesystem is local (file on the webserver),
            or it might return https://myCdnSource.com/publicfiles/ if the application is setup for remote files, and this is the cdn.
            For local filesystems, the protocol is always https, and the domain comes from the domain in the server's config file, or can be overridden with the site property ""
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPHttpBaseClass.WebAddressProtocolDomain">
            <summary>
            The prefered protocol and domain to be used to call the website (or application server). 
            This value returns https:// + the primary domain name configured in the serverr appconfig.json 
            This can be overridden with the site property webAddressProtocolDomain on the Preferences page
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPImageBaseClass">
            <summary>
            Image methods
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPImageBaseClass.GetBestFit(System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Return an image resized and cropped to best fit the hole. 
            The source imagePathFilename is expected to be in the CdnFiles filesystem. 
            New image is saved back to the same path.  
            imageAltSizeList is a list of strings, each representing a previous resize of this image in the format "filename-000x000". The method checks this list for the size requested and if found returns success. 
            If the size requested is not in the list, it is created, saved to the path, and this new size is added to the list. On return, if the imageAltSizeList.count changes, save this new list with the image for future calls. 
            Test if in cache first, else load record and test for resized in alt list, else Resize the image and save back to the image's record
            </summary>
            <param name="imagePathFilename"></param>
            <param name="holeWidth"></param>
            <param name="holeHeight"></param>
            <param name="imageAltSizeList"></param>
        </member>
        <member name="T:Contensive.BaseClasses.CPJSONBaseClass">
            <summary>
            provate consistent JSON methods in a single updateable layer
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPJSONBaseClass.Serialize(System.Object)">
            <summary>
            Serialize an object to JSON
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPJSONBaseClass.Deserialize``1(System.String)">
            <summary>
            Deserialize to an object of a known class
            </summary>
            <typeparam name="T"></typeparam>
            <param name="JSON"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPJSONBaseClass.Deserialize(System.String)">
            <summary>
            Deserialize to an object of a unknown class
            </summary>
            <typeparam name="T"></typeparam>
            <param name="JSON"></param>
            <returns></returns>
        </member>
        <member name="T:Contensive.BaseClasses.CPLayoutBaseClass">
            <summary>
            Manage layout records
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPLayoutBaseClass.GetLayoutByName(System.String)">
            <summary>
            Returns the html layout field of a layout record
            </summary>
            <param name="layoutName"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPLayoutBaseClass.GetLayoutByName(System.String,System.String)">
            <summary>
            Returns the html layout field of a layout record. If the record does not exist, it is created with the supplied default layout
            </summary>
            <param name="layoutName"></param>
            <param name="defaultLayout"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPLayoutBaseClass.GetLayout(System.Int32)">
            <summary>
            get the layout by its id. If not found, returns blank. To determine record status use Layout Model instead.
            </summary>
            <param name="layoutId"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPLayoutBaseClass.GetLayout(System.String)">
            <summary>
            get the layout by its guid. If not found, returns blank. To determine record status use Layout Model instead.
            </summary>
            <param name="layoutGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPLayoutBaseClass.GetLayout(System.String,System.String,System.String)">
            <summary>
            returns a layout by Guid. 
            If missing, the layout record is created with the default name 
            and the layout file referenced in the cdn is transformed (data attribute based html transformations)
            </summary>
            <param name="layoutGuid"></param>
            <param name="defaultLayoutName"></param>
            <param name="defaultLayoutCdnPathFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPLayoutBaseClass.Transform(System.String)">
            <summary>
            Transform the input html using the data attribute based html transformations. These transformations 
            are typically used to convert a static html design
            </summary>
            <param name="sourceHtml"></param>
            <returns></returns>
        </member>
        <member name="T:Contensive.BaseClasses.CPLogBaseClass">
            <summary>
            CP.Log, methods to access and control the logging system
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Contensive.BaseClasses.CPLogBaseClass.LogLevel">
            <summary>
            Log levels
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPLogBaseClass.LogLevel.Trace">
            <summary>
            Begin method X, end method X etc
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPLogBaseClass.LogLevel.Debug">
            <summary>
            Executed queries, user authenticated, session expired
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPLogBaseClass.LogLevel.Info">
            <summary>
            Normal behavior like mail sent, user updated profile etc.
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPLogBaseClass.LogLevel.Warn">
            <summary>
            Incorrect behavior but the application can continue
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPLogBaseClass.LogLevel.Error">
            <summary>
            For example application crashes / exceptions.
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPLogBaseClass.LogLevel.Fatal">
            <summary>
            Highest level: important stuff down
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPLogBaseClass.Add(System.String)">
            <summary>
            Log a message at the info level. (same a Info(logMessage))
            </summary>
            <param name="logMessage"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPLogBaseClass.Add(Contensive.BaseClasses.CPLogBaseClass.LogLevel,System.String)">
            <summary>
            Log a message at the info level.
            </summary>
            <param name="logMessage"></param>
            <param name="level"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPLogBaseClass.Trace(System.String)">
            <summary>
            Log a message
            </summary>
            <param name="logMessage"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPLogBaseClass.Debug(System.String)">
            <summary>
            Log a message
            </summary>
            <param name="logMessage"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPLogBaseClass.Info(System.String)">
            <summary>
            Log a message
            </summary>
            <param name="logMessage"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPLogBaseClass.Warn(System.String)">
            <summary>
            Log a message
            </summary>
            <param name="logMessage"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPLogBaseClass.Error(System.String)">
            <summary>
            Log a message
            </summary>
            <param name="logMessage"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPLogBaseClass.Fatal(System.String)">
            <summary>
            Log a message
            </summary>
            <param name="logMessage"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPLogBaseClass.Dispose">
            <summary>
            Support disposable for non-default datasources
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPMessageQueueBaseClass">
            <summary>
            Message queue
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPMessageQueueBaseClass.CreateQueue(System.String)">
            <summary>
            create a message queue. Queue url/path is returned
            </summary>
            <param name="queueName"></param>
            <returns>queue url/path</returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPMessageQueueBaseClass.GetQueueList">
            <summary>
            return a list of all queue available
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPMessageQueueBaseClass.SendMessage(System.String,System.String)">
            <summary>
            Send a message to a queue
            </summary>
            <param name="queueUrl"></param>
            <param name="message"></param>
        </member>
        <member name="T:Contensive.BaseClasses.CPMustacheBaseClass">
            <summary>
            Manage mustache compatible templating
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPMustacheBaseClass.Render(System.String,System.Object)">
            <summary>
            Perform a simple render of a dataset object with a layout. The layout would likely include {{myName}} style mustache replaceable elements that match public properties  of the dataset.
            </summary>
            <param name="template"></param>
            <param name="dataSet"></param>
            <returns></returns>
        </member>
        <member name="T:Contensive.BaseClasses.CPRequestBaseClass">
            <summary>
            Properties of optional http request
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.Browser">
            <summary>
            The browser string of the request
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.BrowserIsMobile">
            <summary>
            true if the browser is a mobile device
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPRequestBaseClass.Cookie(System.String)">
            <summary>
            Cookie by name
            </summary>
            <param name="cookieName"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.CookieString">
            <summary>
            Full cookie list from the browser. empty line seperates cookies. name=value pairs
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.Form">
            <summary>
            Full key=value list for the form submitted
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.FormAction">
            <summary>
            request verb
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPRequestBaseClass.GetBoolean(System.String)">
            <summary>
            return a value for a key=value pair
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPRequestBaseClass.GetDate(System.String)">
            <summary>
            return a value for a key=value pair
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPRequestBaseClass.GetInteger(System.String)">
            <summary>
            return a value for a key=value pair
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPRequestBaseClass.GetNumber(System.String)">
            <summary>
            return a value for a key=value pair
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPRequestBaseClass.GetText(System.String)">
            <summary>
            return a value for a key=value pair
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.Host">
            <summary>
            The requested domain
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.HTTPAccept">
            <summary>
            The requested accept type
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.HTTPAcceptCharset">
            <summary>
            The requested accect character set
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.HTTPProfile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.HTTPXWapProfile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.Language">
            <summary>
            The requested language
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.Link">
            <summary>
            The requested link
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.LinkForwardSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.LinkSource">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.Page">
            <summary>
            the right-most segment of the url. The page for website urls
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.Path">
            <summary>
            the url segment between the page and the domain
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.PathPage">
            <summary>
            The path and page segments of the url
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.Protocol">
            <summary>
            The request protocol (http, https, etc)
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.QueryString">
            <summary>
            The request querystring (segment following the question mark)
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.Referer">
            <summary>
            The refering url from the browser
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.RemoteIP">
            <summary>
            The IP of the request
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.Secure">
            <summary>
            true if the request is https
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPRequestBaseClass.OK(System.String)">
            <summary>
            
            </summary>
            <param name="RequestName"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.Body">
            <summary>
            The body of the entire request entity. Use when iis does not parse the body into form elements, such as application/json
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPRequestBaseClass.ContentType">
            <summary>
            The content type of the request
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPResponseBaseClass">
            <summary>
            Control over the optional http response
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPResponseBaseClass.ContentType">
            <summary>
            set of geth the content type of the response.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPResponseBaseClass.Cookies">
            <summary>
            A key=value pair string of all cookies being sent in the response
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPResponseBaseClass.Header">
            <summary>
            response headers
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.Clear">
            <summary>
            Clear all response output
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.Close">
            <summary>
            Optional finalize the response. 
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.AddHeader(System.String,System.String)">
            <summary>
            Add a key=value pair to the http header
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.Flush">
            <summary>
            flear the response
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.Redirect(System.String)">
            <summary>
            Set the response redirect
            </summary>
            <param name="link"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.SetBuffer(System.Boolean)">
            <summary>
            
            </summary>
            <param name="bufferOn"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.SetStatus(System.String)">
            <summary>
            Set the http response. ex 200 Success
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.SetType(System.String)">
            <summary>
            set response content type
            </summary>
            <param name="contentType"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.SetCookie(System.String,System.String)">
            <summary>
            set a simple response cookie value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.SetCookie(System.String,System.String,System.DateTime)">
            <summary>
            set a response cookie
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dateExpires"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.SetCookie(System.String,System.String,System.DateTime,System.String)">
            <summary>
            set a response cookie
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dateExpires"></param>
            <param name="domain"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.SetCookie(System.String,System.String,System.DateTime,System.String,System.String)">
            <summary>
            set a response cookie
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dateExpires"></param>
            <param name="domain"></param>
            <param name="path"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.SetCookie(System.String,System.String,System.DateTime,System.String,System.String,System.Boolean)">
            <summary>
            set a response cookie
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="dateExpires"></param>
            <param name="domain"></param>
            <param name="path"></param>
            <param name="secure"></param>
        </member>
        <member name="P:Contensive.BaseClasses.CPResponseBaseClass.isOpen">
            <summary>
            Is the response object available to write. False during background processes and after the html response has ended. For instance, when a remote method is returned the response is closed meaning no other data should be added to the output.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.Write(System.String)">
            <summary>
            deprecated. content generation no longer includes a buffer
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPResponseBaseClass.SetTimeout(System.String)">
            <summary>
            Deprecated. Set http response timeout directly in response client.
            </summary>
            <param name="timeoutSeconds"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSecurityBaseClass.EncryptOneWay(System.String)">
            <summary>
            return an encrypted string. This is a one way so use it passwords, etc.
            </summary>
            <param name="unencryptedString"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSecurityBaseClass.VerifyOneWay(System.String,System.String)">
            <summary>
            return true if an encrypted string matches an unencrypted string.
            </summary>
            <param name="unencryptedString"></param>
            <param name="encryptedString"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSecurityBaseClass.EncryptTwoWay(System.String)">
            <summary>
            Return an AES encrypted string.  This is a two way so use it for little sister security, not foreign government security
            </summary>
            <param name="unencryptedString"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSecurityBaseClass.DecryptTwoWay(System.String)">
            <summary>
            Decrypt an AES encrypted string. This is a two way so use it for little sister security, not foreign government security
            </summary>
            <param name="encryptedString"></param>
            <returns></returns>
        </member>
        <member name="T:Contensive.BaseClasses.CPSiteBaseClass">
            <summary>
            Application settings and methods
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPSiteBaseClass.Name">
            <summary>
            The application name
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.ClearProperty(System.String)">
            <summary>
            remove the property
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.SetProperty(System.String,System.String)">
            <summary>
            set a site-wide property. Read back with cp.site.GetText(), .getBoolean(), etc
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.SetProperty(System.String,System.Boolean)">
            <summary>
            set a site-wide property. Read back with cp.site.GetText(), .getBoolean(), etc
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.SetProperty(System.String,System.DateTime)">
            <summary>
            set a site-wide property. Read back with cp.site.GetText(), .getBoolean(), etc
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.SetProperty(System.String,System.Int32)">
            <summary>
            set a site-wide property. Read back with cp.site.GetText(), .getBoolean(), etc
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.SetProperty(System.String,System.Double)">
            <summary>
            set a site-wide property. Read back with cp.site.GetText(), .getBoolean(), etc
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetText(System.String,System.String)">
            <summary>
            Read a site property as a string. If the key is not set, sets and returns the default value.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetText(System.String)">
            <summary>
            Read a site property as a string
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetBoolean(System.String,System.Boolean)">
            <summary>
            Read a site property as a boolean. If the key is not set, sets and returns the default value.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetBoolean(System.String)">
            <summary>
            Read a site property as a boolean.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetDate(System.String,System.DateTime)">
            <summary>
            Read a site property as a date. If the key is not set, sets and returns the default value.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetDate(System.String)">
            <summary>
            Read a site property as a date.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetInteger(System.String,System.Int32)">
            <summary>
            Read a site property as an integer. If the key is not set, sets and returns the default value.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetInteger(System.String)">
            <summary>
            Read a site property as an integer.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetNumber(System.String)">
            <summary>
            Read a site property as a double. If the key is not set, sets and returns the default value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetNumber(System.String,System.Double)">
            <summary>
            Read a site property as a double.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPSiteBaseClass.DomainPrimary">
            <summary>
            The primary domain name for the application. Used for email links, monitoring, etc.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPSiteBaseClass.Domain">
            <summary>
            For a webpage hit, this is the current domain used, otherwise it is the primary domain.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPSiteBaseClass.DomainList">
            <summary>
            A complete list of all domains supported.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPSiteBaseClass.PageDefault">
            <summary>
            For websites, the default script page.
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.LogActivity(System.String,System.Int32,System.Int32)">
            <summary>
            Log a user activity to the activity log.
            </summary>
            <param name="message"></param>
            <param name="userID"></param>
            <param name="organizationId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.ErrorReport(System.String)">
            <summary>
            Report an error, logging it and sending notifications as the app is confirgured. Does not rethrow the error.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.ErrorReport(System.Exception)">
            <summary>
            Report an error, logging it and sending notifications as the app is confirgured. Does not rethrow the error.
            </summary>
            <param name="Ex"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.ErrorReport(System.Exception,System.String)">
            <summary>
            Report an error, logging it and sending notifications as the app is confirgured. Does not rethrow the error.
            </summary>
            <param name="Ex"></param>
            <param name="message"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.TestPoint(System.String)">
            <summary>
            When debugging is true, add this message and timestamp to the debug trace.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.LogWarning(System.String,System.String,System.String,System.String)">
            <summary>
            Log a message to the site-warning log.The site warning log lets admins know there are issues they need to resolve. This is not code bugs, but content or setting relalted issues.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="typeOfWarningKey"></param>
            <param name="instanceKey"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.LogAlarm(System.String)">
            <summary>
            Log an Alarm. Alarms are saved in the \Contensive\Alarms folder, and will automatically cause the server alarm to fail.
            </summary>
            <param name="cause"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.AddLinkAlias(System.String,System.Int32,System.String)">
            <summary>
            Add a link alias record for this page.
            </summary>
            <param name="linkAlias">The link alias to add.</param>
            <param name="pageId">the id of the page to be displayed by this link alias</param>
            <param name="queryStringSuffix">The query string to be added to the url that may effect how addons on the page render.</param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.AddLinkAlias(System.String,System.Int32)">
            <summary>
            Add a link alias record for this page.
            </summary>
            <param name="linkAlias"></param>
            <param name="pageId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.ThrowEvent(System.String)">
            <summary>
            An addon can throw an Event that then executes other addons that bind to that event in their record. 
            For example, ecommerce throws an event 'fulfillment'. An item like a giftcard can be emailed on fulfillment which occurs differently on different types of accounts.
            </summary>
            <param name="eventNameIdOrGuid"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPSiteBaseClass.FilePath">
            <summary>
            deprecated. Use CP.Http.CdnFilePathPrefix or CP.Http.CdnFilepathPrefixAbsolute
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.installCollectionFile(System.String,System.String@)">
            <summary>
            deprecated. Use CP.Addon.InstallCollectionFile()
            </summary>
            <param name="privatePathFilename"></param>
            <param name="returnUserError"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.installCollectionFromLibrary(System.String,System.String@)">
            <summary>
            Use CP.Addon.InstallCollectionFromLibrary()
            </summary>
            <param name="collectionGuid"></param>
            <param name="returnUserError"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetBoolean(System.String,System.String)">
            <summary>
            Use correct defaultValue type
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetDate(System.String,System.String)">
            <summary>
            Use correct defaultValue type
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetInteger(System.String,System.String)">
            <summary>
            Use correct defaultValue type
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetNumber(System.String,System.String)">
            <summary>
            Use correct defaultValue type
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetProperty(System.String,System.String)">
            <summary>
            Use GetText()
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.GetProperty(System.String)">
            <summary>
            Use GetText()
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPSiteBaseClass.MultiDomainMode">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPSiteBaseClass.PhysicalFilePath">
            <summary>
            Deprecated, please use cp.cdnFiles, cp.privateFiles, cp.WwwFiles, or cp.TempFiles instead.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPSiteBaseClass.PhysicalInstallPath">
            <summary>
            Deprecated, please use cp.cdnFiles, cp.privateFiles, cp.WwwFiles, or cp.TempFiles instead.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPSiteBaseClass.PhysicalWWWPath">
            <summary>
            Deprecated, please use cp.cdnFiles, cp.privateFiles, cp.WwwFiles, or cp.TempFiles instead.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPSiteBaseClass.TrapErrors">
            <summary>
            Deprecated
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPSiteBaseClass.AppPath">
            <summary>
            Deprecated. This was the url path to the application for virtually hosted sites. Should be a blank.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPSiteBaseClass.AppRootPath">
            <summary>
            Deprecated. This was the url path to the application for virtually hosted sites. Should be a blank.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPSiteBaseClass.VirtualPath">
            <summary>
            Deprecated. This was a slash followed by the application name.
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.IsTesting">
            <summary>
            Deprecated
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.RequestTask(System.String,System.String,System.String,System.String)">
            <summary>
            Use CP.Utils.ExportCsv()
            </summary>
            <param name="command"></param>
            <param name="SQL"></param>
            <param name="exportName"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.LandingPageId(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="domainName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.LandingPageId">
            <summary>
            Deprecated
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPSiteBaseClass.EncodeAppRootPath(System.String)">
            <summary>
            Use CP.Utils.EncodeAppRootPath()
            </summary>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="T:Contensive.BaseClasses.CPSMSBaseClass">
            <summary>
            text messaging (SNS) layer. Provide properties and methods to abstract the service for addons.
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPSMSBaseClass.Send(System.String,System.String)">
            <summary>
            Send an text message with SMS to the phone numnber
            </summary>
            <param name="smsPhoneNumber"></param>
            <param name="smsMessage"></param>
            <returns></returns>
        </member>
        <member name="T:Contensive.BaseClasses.CPUserBaseClass">
            <summary>
            properties and methods that relate to the current user identity.
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.ClearProperty(System.String)">
            <summary>
            remove the property
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.GetIdByLogin(System.String,System.String)">
            <summary>
            Get a user's id from their username and password
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.Track">
            <summary>
            If track users is disabled, this method begins tracking the current user
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.IsAdvancedEditing(System.String)">
            <summary>
            is the current user advance editing the indicated content
            </summary>
            <param name="contentName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.IsAdvancedEditing">
            <summary>
            is the current user advanced editing any content
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.IsAuthenticated">
            <summary>
            is the current user authetnicated
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.IsEditing(System.String)">
            <summary>
            true if the current user is editing the content specified
            </summary>
            <param name="contentName"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.IsEditingAnything">
            <summary>
            true if the current user is editing any content
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.IsTemplateEditing">
            <summary>
            true if the current user is editing the template
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.IsPageBuilderEditing">
            <summary>
            true if the current user is an administrator and editing with Page Builder (creating addon lists for pages)
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.IsDebugging">
            <summary>
            true if the current user is a developer and has turned on debugging
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.IsGuest">
            <summary>
            true if the current user is not authenticated and not recognized. 
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.IsQuickEditing(System.String)">
            <summary>
            true if the current user has turned on quick editing
            </summary>
            <param name="contentName"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.IsRecognized">
            <summary>
             true if the current user is recognized from their visitor record, but has not logged in as that identity
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.IsNew">
            <summary>
            true if the current user is not recognized and not authenticated
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.IsAdmin">
            <summary>
            true if the current user is authenticated and their identity is administrator role (checkbox in people record)
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.IsContentManager(System.String)">
            <summary>
            true if the current user is authenticated and their identity is content manager role (in a content manager group)
            </summary>
            <param name="contentName"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.IsDeveloper">
            <summary>
            true if the current user is authenticated and their identity is the developer role (checkbox in people record)
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.IsInGroup(System.String)">
            <summary>
            true if the specified user is authenticted and in the specified group
            </summary>
            <param name="groupName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.IsInGroupList(System.String,System.Int32)">
            <summary>
            true if the specified user is authenticted and in one of the specified groups. 
            </summary>
            <param name="groupIdCommaList">A comma delimited list of one or more group Ids</param>
            <param name="checkUserID"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.IsInGroupList(System.String)">
            <summary>
            true if the current user is authenticted and in one of the specified groups. 
            </summary>
            <param name="groupIdCommaList"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.Recognize(System.Int32)">
            <summary>
            Associate the current visit session to the visitor session, but leave the user not authenticated. This changes the user to isRecognized=true, isGuest=false, isAuthenticated=false
            </summary>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.Login(System.String,System.String,System.Boolean)">
            <summary>
            Autheticate the current user to the credentials provided. If the site property AllowEmailLogin is true, this method treats the first argument as either email or username. Duplicates and email=username matches are not allowed.
            </summary>
            <param name="usernameOrEmail"></param>
            <param name="password"></param>
            <param name="setAutoLogin">If true, and allowed on the site, the user will be automatically logged in by their visitor cookie on future visits. Not available to admin or devloper roles.</param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.Login(System.String,System.String)">
            <summary>
            Autheticate the current user to the credentials provided. If the site property AllowEmailLogin is true, this method treats the first argument as either email or username. Duplicates and email=username matches are not allowed.
            </summary>
            <param name="usernameOrEmail"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.LoginByID(System.Int32)">
            <summary>
            Autheticate the current user to the identity id provided.
            </summary>
            <param name="recordId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.LoginByID(System.Int32,System.Boolean)">
            <summary>
            Autheticate the current user to the identity id provided. If the site property AllowEmailLogin is true, this method treats the first argument as either email or username. Duplicates and email=username matches are not allowed.
            </summary>
            <param name="recordId"></param>
            <param name="setAutoLogin"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.LoginIsOK(System.String,System.String)">
            <summary>
            returns true if the credentials provided are valid for a user in the system.
            </summary>
            <param name="usernameOrEmail"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.Logout">
            <summary>
            logout the current user
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.IsNewLoginOK(System.String,System.String)">
            <summary>
            returns true if the credentials are valid, and not currently in user (the current user can use them)
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.Language">
            <summary>
            The language relfected in the browser metadata
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.LanguageID">
            <summary>
            The id of the language relfected in the browser metadata
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.Email">
            <summary>
            If autheticated, the current user's email 
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.Id">
            <summary>
            If autheticated, the current user's id
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.Name">
            <summary>
            If autheticated, the current user's name
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.OrganizationID">
            <summary>
            If autheticated, the current user's organization
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUserBaseClass.Username">
            <summary>
            If autheticated, the current user's username
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.GetText(System.String)">
            <summary>
            Return the user property for the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.GetText(System.String,System.String)">
            <summary>
            Return the user property for the specified key. If the key doesn't exist, save and return the default value.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.GetBoolean(System.String)">
            <summary>
            Return the user property for the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.GetBoolean(System.String,System.Boolean)">
            <summary>
            Return the user property for the specified key. If the key doesn't exist, save and return the default value.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.GetDate(System.String)">
            <summary>
            Return the user property for the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.GetDate(System.String,System.DateTime)">
            <summary>
            Return the user property for the specified key. If the key doesn't exist, save and return the default value.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.GetInteger(System.String)">
            <summary>
            Return the user property for the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.GetInteger(System.String,System.Int32)">
            <summary>
            Return the user property for the specified key. If the key doesn't exist, save and return the default value.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.GetNumber(System.String)">
            <summary>
            Return the user property for the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.GetNumber(System.String,System.Double)">
            <summary>
            Return the user property for the specified key. If the key doesn't exist, save and return the default value.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.GetObject``1(System.String)">
            <summary>
            Return the user property for the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.SetProperty(System.String,System.String)">
            <summary>
            Set a text user property
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.SetProperty(System.String,System.String,System.Int32)">
            <summary>
            Set a text user property for a specific user
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.SetProperty(System.String,System.Int32)">
            <summary>
            Set a user property for this type
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.SetProperty(System.String,System.Int32,System.Int32)">
            <summary>
            Set an integer user property for a specific user
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.SetProperty(System.String,System.Double)">
            <summary>
            Set a user property for this type
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.SetProperty(System.String,System.Double,System.Int32)">
            <summary>
            Set a number (double) user property for a specific user
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.SetProperty(System.String,System.Boolean)">
            <summary>
            Set a user property for this type
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.SetProperty(System.String,System.Boolean,System.Int32)">
            <summary>
            Set a boolean user property for a specific user
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="userId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.SetProperty(System.String,System.DateTime)">
            <summary>
            Set a user property for this type
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserBaseClass.SetProperty(System.String,System.DateTime,System.Int32)">
            <summary>
            Set a datetime user property for a specific user
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="userId"></param>
        </member>
        <member name="T:Contensive.BaseClasses.CPUserErrorBaseClass">
            <summary>
            Can be used to accumulate user errors during a disperate process. 
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserErrorBaseClass.Add(System.String)">
            <summary>
            Add an error to the list
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserErrorBaseClass.GetList">
            <summary>
            get the list of errors
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUserErrorBaseClass.OK">
            <summary>
            returns true if there are no errors
            </summary>
            <returns></returns>
        </member>
        <member name="T:Contensive.BaseClasses.CPUtilsBaseClass">
            <summary>
            helper methods to support processes, properties and methods used throughout
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPUtilsBaseClass.addonContext">
            <summary>
            When an addon is executed, this is a description of the context of the method. Used to support features like html-comments only appropriate for some context
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextPage">
            <summary>
            Addon placed on a page.
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextAdmin">
            <summary>
            Addon run by the admin site addon, to be displayed in the dashboard space
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextTemplate">
            <summary>
            Addon placed on a template
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextEmail">
            <summary>
            Addon executed when an email is being rendered for an individual
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextRemoteMethodHtml">
            <summary>
            Addon executed as a remote method and is expected to return html (as opposed to JSON)
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextOnNewVisit">
            <summary>
            Addon executed because when a new visit is created. The return is ignored.
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextOnPageEnd">
            <summary>
            Addon executed right before the body end html tag. The return is placed in the html
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextOnPageStart">
            <summary>
            Addon executed right after the open body tag. The return is placed in the html.
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextEditor">
            <summary>
            Addon executed because it is set as the editor for a content field type. It reads details from the doc and creates an html edit tag(s).
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextHelpUser">
            <summary>
            deprecated
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextHelpAdmin">
            <summary>
            deprecated
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextHelpDeveloper">
            <summary>
            deprecated
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextOnContentChange">
            <summary>
            Addon executed by admin site when a content record is changed. Reads details from doc properties and act on the change
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextFilter">
            <summary>
            Executes when the html page is complete. Can modify the html document in core.docBody
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextSimple">
            <summary>
            Return the addon's return, add artifacts like css to document.
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextOnBodyStart">
            <summary>
            Executes right after the body start. Return is placed in the html document
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextOnBodyEnd">
            <summary>
            Executes right before the end body. Return is placed in the html body
            </summary>
        </member>
        <member name="F:Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextRemoteMethodJson">
            <summary>
            Executes as a remote method. If return is a string, it is returned. If the return is any other type, it is serialized to JSON.
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteHostRecordContext">
            <summary>
            When an addon is executed from content with {% JSON %}, this object describes the record in which the command was executed
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteHostRecordContext.contentName">
            <summary>
            the content for the record (metadata that describes the table)
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteHostRecordContext.recordId">
            <summary>
            record's id
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteHostRecordContext.fieldName">
            <summary>
            field name
            </summary>
        </member>
        <member name="T:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext">
            <summary>
            When an addon is execute, this object describes the environment in which the addon will be used.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext.errorContextMessage">
            <summary>
            This caption is used if the addon cannot be executed.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext.addonType">
            <summary>
            select enumeration option the describes the environment in which the addon is being executed (in an email, on a page, as a remote method, etc)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext.instanceGuid">
            <summary>
            Optional. If the addon is run from a page, it includes an instanceGuid which can be used by addon programming to locate date for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext.argumentKeyValuePairs">
            <summary>
            Optional. Name value pairs added to the document environment during execution so they be read by addon programming during and after execution with cp.doc.getText(), etc.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext.hostRecord">
            <summary>
            Optional. If this addon is run automatically because it was included in content, this is the contentName, recordId and fieldName of the record that held that content.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext.wrapperID">
            <summary>
            Optional. If included, this is the id value of a record in the Wrappers content and that wrapper will be added to the addon return result.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext.cssContainerId">
            <summary>
            Optional. If included, the addon will be wrapped with a div and this will be the html Id value of the div. May be used to customize the resulting html styles.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext.cssContainerClass">
            <summary>
            Optional. If included, the addon will be wrapped with a div and this will be the html class value of the div. May be used to customize the resulting html styles.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext.isDependency">
            <summary>
            Optional. If true, this addon is called because it was a dependancy, and can only be called once within a document.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext.forceHtmlDocument">
            <summary>
            Optional. If set true, the addon being called will be delivered as ah html document, with head, body and html tags. This forces the addon's htmlDocument setting.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext.backgroundProcess">
            <summary>
            When true, the environment is run from the task subsystem, without a UI. Assemblies from base collection run from program files. Addon return is ignored.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext.forceJavascriptToHead">
            <summary>
            When true, an addon's javascript will be put in the head. This also forces javascript for all dependant addons to the head.
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext.personalizationPeopleId">
            <summary>
            Deprecated.  execute against the current session context
            </summary>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPUtilsBaseClass.addonExecuteContext.personalizationAuthenticated">
            <summary>
            Deprecated.  execute against the current session context
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetAuthenticationToken(System.Int32)">
            <summary>
            Authentication token can be used to authenticate the user with the request "eid=token". The default expiration is 24 hours.
            </summary>
            <param name="UserId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetAuthenticationToken(System.Int32,System.DateTime)">
            <summary>
            Authentication token can be used to authenticate the user with the request "eid=token".
            </summary>
            <param name="UserId"></param>
            <param name="Expiration"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.AppendLog(System.String)">
            <summary>
            Create a log entry type "Log"
            </summary>
            <param name="logText"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ConvertHTML2Text(System.String)">
            <summary>
            Return a text approximation of html content
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ConvertText2HTML(System.String)">
            <summary>
            Return an html approximation of text content
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.CreateGuid">
            <summary>
            Return a new guid in system's format {...}
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.DecodeHtmlFromWysiwygEditor(System.String)">
            <summary>
            html content can be stored with embedded addons. Use this routine to prepare the content returnedfrom a wysiwyg editor. (addons converted to images)
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.DecodeResponseVariable(System.String)">
            <summary>
            Decodes a querystring response argument (key or value) you would expect to see within a querystring (key1=value1&amp;amp;key2=value2)
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.EncodeAppRootPath(System.String)">
            <summary>
            convert a file link (like /ccLibraryFiles/imageFilename/000001/this.png) to a full URL
            </summary>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.EncodeBoolean(System.Object)">
            <summary>
            Convert to boolean. If no valid rendition exists, returns false. (accepts true, yes, on, any +number)
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.EncodeContentForWeb(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            html content can be stored with embedded addons. This routine renders the content for display on a website.
            </summary>
            <param name="source"></param>
            <param name="contextContentName"></param>
            <param name="contextRecordID"></param>
            <param name="wrapperID"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.EncodeDate(System.Object)">
            <summary>
            Convert to DateTime. If no valid rendition exists, returns default( DateTime ) = 1/1/0001 12:00:00AM.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.EncodeHtmlForWysiwygEditor(System.String)">
            <summary>
            html content can be stored with embedded addons. Use this routine to prepare the content for a wysiwyg editor.  (addons converted to images)
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.EncodeInteger(System.Object)">
            <summary>
            Convert to integer. If no valid rendition exists, returns 0.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.EncodeNumber(System.Object)">
            <summary>
            Convert to double. If no valid rendition exists, returns 0.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.EncodeRequestVariable(System.String)">
            <summary>
            Encodes a querystring response argument (key or value) you would expect to see within a querystring (key1=value1&amp;key2=value2)
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.EncodeText(System.Object)">
            <summary>
            Convert to string. If no valid rendition exists, returns empty.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ExportCsv(System.String,System.String,System.String)">
            <summary>
            Run an SQL query on the default datasource and save the data in a CSV file in the filename provided to a record in the downloads table.
            </summary>
            <param name="SQL">The query to run, selecting the data to be exported.</param>
            <param name="exportName">The name of the export data, used in the downloads table</param>
            <param name="filename">The filename for the export, saved in the downloads table</param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetArgument(System.String,System.String,System.String,System.String)">
            <summary>
            get a value from a key=value delimited string. ex keyValueDelimitedString (a=b&amp;amp;c=4), keys ( a and c ), delimiter ( &amp;amp; ), values ( b and 4 )
            </summary>
            <param name="key"></param>
            <param name="keyValueDelimitedString"></param>
            <param name="defaultValue"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetArgument(System.String,System.String,System.String)">
            <summary>
            get a value from a key=value delimited string. ex keyValueDelimitedString (a=b&amp;amp;c=4), keys ( a and c ), delimiter ( &amp;amp; ), values ( b and 4 )
            </summary>
            <param name="key"></param>
            <param name="keyValueDelimitedString"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetArgument(System.String,System.String)">
            <summary>
            get a value from a key=value delimited string. ex keyValueDelimitedString (a=b&amp;amp;c=4), keys ( a and c ), delimiter ( &amp;amp; ), values ( b and 4 )
            </summary>
            <param name="key"></param>
            <param name="keyValueDelimitedString"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetFilename(System.String)">
            <summary>
            Return the filename part of a path (after the left-most slash), either Unix or Dos
            </summary>
            <param name="pathFilename"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetListIndex(System.String,System.String)">
            <summary>
            returns a 1-based index into the comma delimited ListOfItems where Item is found. 
            </summary>
            <param name="itemToFind"></param>
            <param name="commaDelimitedListOfItems"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetRandomInteger">
            <summary>
            Return a random integer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.isGuid(System.String)">
            <summary>
            returns true if the string is a guid (start/end with brace, char count, check dashes
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.IISReset">
            <summary>
            For websites, run an iisreset. Call from a remote method that detects the server restoration and recovers
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.IsInDelimitedString(System.String,System.String,System.String)">
            <summary>
            return true if the itemToFind is in the delimitedString
            </summary>
            <param name="delimitedString"></param>
            <param name="itemToFind"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyLinkQueryString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Update or add a key=value pair within a url like "/path/page?key=value&amp;key=value"
            </summary>
            <param name="url"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="addIfMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyLinkQueryString(System.String,System.String,System.String)">
            <summary>
            Update or add a key=value pair within a url like "/path/page?key=value&amp;key=value"
            </summary>
            <param name="url"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyLinkQueryString(System.String,System.String,System.Int32)">
            <summary>
            Update or add a key=value pair within a url like "/path/page?key=value&amp;key=value"
            </summary>
            <param name="url"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyLinkQueryString(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Update or add a key=value pair within a url like "/path/page?key=value&amp;key=value"
            </summary>
            <param name="url"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="addIfMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyLinkQueryString(System.String,System.String,System.Double)">
            <summary>
            Update or add a key=value pair within a url like "/path/page?key=value&amp;key=value"
            </summary>
            <param name="url"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyLinkQueryString(System.String,System.String,System.Double,System.Boolean)">
            <summary>
            Update or add a key=value pair within a url like "/path/page?key=value&amp;key=value"
            </summary>
            <param name="url"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="addIfMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyLinkQueryString(System.String,System.String,System.Boolean)">
            <summary>
            Update or add a key=value pair within a url like "/path/page?key=value&amp;key=value"
            </summary>
            <param name="url"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyLinkQueryString(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Update or add a key=value pair within a url like "/path/page?key=value&amp;key=value"
            </summary>
            <param name="url"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="addIfMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyLinkQueryString(System.String,System.String,System.DateTime)">
            <summary>
            Update or add a key=value pair within a url like "/path/page?key=value&amp;key=value"
            </summary>
            <param name="url"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyLinkQueryString(System.String,System.String,System.DateTime,System.Boolean)">
            <summary>
            Update or add a key=value pair within a url like "/path/page?key=value&amp;key=value"
            </summary>
            <param name="url"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="addIfMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyQueryString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Update or add a key=value pair within key value pair string like "key=value&amp;key=value"
            </summary>
            <param name="WorkingQuery"></param>
            <param name="QueryName"></param>
            <param name="QueryValue"></param>
            <param name="AddIfMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyQueryString(System.String,System.String,System.String)">
            <summary>
            Update or add a key=value pair within key value pair string like "key=value&amp;key=value"
            </summary>
            <param name="WorkingQuery"></param>
            <param name="QueryName"></param>
            <param name="QueryValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyQueryString(System.String,System.String,System.Int32)">
            <summary>
            Update or add a key=value pair within key value pair string like "key=value&amp;key=value"
            </summary>
            <param name="WorkingQuery"></param>
            <param name="QueryName"></param>
            <param name="QueryValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyQueryString(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Update or add a key=value pair within key value pair string like "key=value&amp;key=value"
            </summary>
            <param name="WorkingQuery"></param>
            <param name="QueryName"></param>
            <param name="QueryValue"></param>
            <param name="AddIfMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyQueryString(System.String,System.String,System.Double)">
            <summary>
            Update or add a key=value pair within key value pair string like "key=value&amp;key=value"
            </summary>
            <param name="WorkingQuery"></param>
            <param name="QueryName"></param>
            <param name="QueryValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyQueryString(System.String,System.String,System.Double,System.Boolean)">
            <summary>
            Update or add a key=value pair within key value pair string like "key=value&amp;key=value"
            </summary>
            <param name="WorkingQuery"></param>
            <param name="QueryName"></param>
            <param name="QueryValue"></param>
            <param name="AddIfMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyQueryString(System.String,System.String,System.Boolean)">
            <summary>
            Update or add a key=value pair within key value pair string like "key=value&amp;key=value"
            </summary>
            <param name="WorkingQuery"></param>
            <param name="QueryName"></param>
            <param name="QueryValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyQueryString(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Update or add a key=value pair within key value pair string like "key=value&amp;key=value"
            </summary>
            <param name="WorkingQuery"></param>
            <param name="QueryName"></param>
            <param name="QueryValue"></param>
            <param name="AddIfMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyQueryString(System.String,System.String,System.DateTime)">
            <summary>
            Update or add a key=value pair within key value pair string like "key=value&amp;key=value"
            </summary>
            <param name="WorkingQuery"></param>
            <param name="QueryName"></param>
            <param name="QueryValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ModifyQueryString(System.String,System.String,System.DateTime,System.Boolean)">
            <summary>
            Update or add a key=value pair within key value pair string like "key=value&amp;key=value"
            </summary>
            <param name="WorkingQuery"></param>
            <param name="QueryName"></param>
            <param name="QueryValue"></param>
            <param name="AddIfMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.SeparateURL(System.String,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            return the components of a url
            </summary>
            <param name="url"></param>
            <param name="return_protocol"></param>
            <param name="return_domain"></param>
            <param name="return_path"></param>
            <param name="return_page"></param>
            <param name="return_queryString"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.SeparateURL(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            return the components of a url
            </summary>
            <param name="url"></param>
            <param name="return_protocol"></param>
            <param name="return_domain"></param>
            <param name="return_port"></param>
            <param name="return_path"></param>
            <param name="return_page"></param>
            <param name="return_queryString"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.SplitDelimited(System.String,System.String)">
            <summary>
            returns the result of a Split, except it honors quoted text, if a quote is found, it is assumed to also be a delimiter ( 'this"that"theother' = 'this "that" theother' )
            </summary>
            <param name="wordList"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.Upgrade51ConvertDirectoryInfoArrayToParseString(System.Collections.Generic.List{Contensive.BaseClasses.CPFileSystemBaseClass.FolderDetail})">
            <summary>
            Method used to convert application data from DotNet DirectoryInfo object to internal legacy 4.1 Parse string.
            </summary>
            <param name="DirectoryInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.Upgrade51ConvertFileInfoArrayToParseString(System.Collections.Generic.List{Contensive.BaseClasses.CPFileSystemBaseClass.FileDetail})">
            <summary>
            Method used to convert application data from DotNet DirectoryInfo object to internal legacy 4.1 Parse string.
            </summary>
            <param name="DirectoryInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.EncodeUrl(System.String)">
            <summary>
            wrapped dotnet namespace for use in scripting
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.DecodeUrl(System.String)">
            <summary>
            wrapped dotnet namespace for use in scripting
            </summary>
            <param name="Url"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.EncodeHTML(System.String)">
            <summary>
            wrapped dotnet namespace for use in scripting
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetDateTimeMockable">
             <summary>
            Returns current DateTime.Now if cp.Mock.DateTime is not set, else returns Mock.DateTime
             </summary>
             <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.DecodeHTML(System.String)">
            <summary>
            wrapped dotnet namespace for use in scripting
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.AppendLogFile(System.String)">
            <summary>
            Deprecated, use AppendLog
            </summary>
            <param name="Text"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.AppendLog(System.String,System.String)">
            <summary>
            Deprecated, file logging is no longer supported. Use AppendLog(message) to log Info level messages
            </summary>
            <param name="pathFilename"></param>
            <param name="logText"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ExecuteAddon(System.String)">
            <summary>
            Deprecated. use cp.addon.execute()
            </summary>
            <param name="idGuidOrName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ExecuteAddon(System.String,System.Int32)">
            <summary>
            Deprecated. use cp.addon.execute() and manage the wrapper manually.
            </summary>
            <param name="IdGuidOrName"></param>
            <param name="WrapperId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ExecuteAddon(System.String,Contensive.BaseClasses.CPUtilsBaseClass.addonContext)">
            <summary>
            Deprecated. use cp.addon.execute()
            </summary>
            <param name="IdGuidOrName"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ExecuteAddonAsProcess(System.String)">
            <summary>
            Deprecated. use cp.addon.executeAsProcess()
            </summary>
            <param name="IdGuidOrName"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ConvertLinkToShortLink(System.String,System.String,System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="URL"></param>
            <param name="ServerHost"></param>
            <param name="ServerVirtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ConvertShortLinkToLink(System.String,System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="URL"></param>
            <param name="PathPagePrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.DecodeGMTDate(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="GMTDate"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.Upgrade(System.Boolean)">
            <summary>
            Deprecated
            </summary>
            <param name="isNewApp"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetPleaseWaitEnd">
            <summary>
            Deprecated
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetPleaseWaitStart">
            <summary>
            Deprecated
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.EncodeJavascript(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.EncodeQueryString(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetFirstNonZeroDate(System.DateTime,System.DateTime)">
            <summary>
            Deprecated
            </summary>
            <param name="Date0"></param>
            <param name="Date1"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetFirstNonZeroInteger(System.Int32,System.Int32)">
            <summary>
            Deprecated
            </summary>
            <param name="Integer0"></param>
            <param name="Integer1"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetIntegerString(System.Int32,System.Int32)">
            <summary>
            Deprecated
            </summary>
            <param name="Value"></param>
            <param name="DigitCount"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetLine(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="Body"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.GetProcessID">
            <summary>
            Deprecated
            </summary>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.ParseURL(System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Deprecated
            </summary>
            <param name="SourceURL"></param>
            <param name="Protocol"></param>
            <param name="Host"></param>
            <param name="Port"></param>
            <param name="Path"></param>
            <param name="Page"></param>
            <param name="QueryString"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.Sleep(System.Int32)">
            <summary>
            Deprecated
            </summary>
            <param name="timeMSec"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.hashMd5(System.String)">
            <summary>
            Deprecated
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.installCollectionFromFile(System.String)">
            <summary>
            Install an addon collection file asynchonously. The task is queued and the taskId is returned. Use cp.tasks.getTaskStatus to determine status
            </summary>
            <param name="privateFile"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.installCollectionsFromFolder(System.String,System.Boolean)">
            <summary>
            Install all addon collections in a folder asynchonously. Optionally delete the folder. The task is queued and the taskId is returned. Use cp.tasks.getTaskStatus to determine status
            </summary>
            <param name="privateFolder"></param>
            <param name="deleteFolderWhenDone"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.installCollectionsFromFolder(System.String)">
            <summary>
            Install all addon collections in a folder asynchonously. The task is queued and the taskId is returned. Use cp.tasks.getTaskStatus to determine status
            </summary>
            <param name="privateFolder"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.installCollectionFromLibrary(System.String)">
            <summary>
            Install an addon collections from the collection library asynchonously. The task is queued and the taskId is returned. Use cp.tasks.getTaskStatus to determine status
            </summary>
            <param name="collectionGuid"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPUtilsBaseClass.installCollectionFromLink(System.String)">
            <summary>
            Install an addon collections from an endpoint asynchonously. The task is queued and the taskId is returned. Use cp.tasks.getTaskStatus to determine status
            </summary>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.ClearProperty(System.String)">
            <summary>
            remove the property
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:Contensive.BaseClasses.CPVisitBaseClass.CookieSupport">
            <summary>
            return true if the visit supports cookies
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.GetText(System.String,System.String)">
            <summary>
            Get the visit property that matches the key. If not found set and return the default value.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.GetText(System.String)">
            <summary>
            Get the visit property that matches the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.GetBoolean(System.String,System.Boolean)">
            <summary>
            Get the visit property that matches the key. If not found set and return the default value.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.GetBoolean(System.String)">
            <summary>
            Get the visit property that matches the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.GetDate(System.String,System.DateTime)">
            <summary>
            Get the visit property that matches the key. If not found set and return the default value.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.GetDate(System.String)">
            <summary>
            Get the visit property that matches the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.GetObject``1(System.String)">
            <summary>
            Return the user property for the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.GetInteger(System.String,System.Int32)">
            <summary>
            Get the visit property that matches the key. If not found set and return the default value.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.GetInteger(System.String)">
            <summary>
            Get the visit property that matches the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.GetNumber(System.String,System.Double)">
            <summary>
            Get the visit property that matches the key. If not found set and return the default value.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.GetNumber(System.String)">
            <summary>
            Get the visit property that matches the key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPVisitBaseClass.Id">
            <summary>
            Return the visit id
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPVisitBaseClass.LastTime">
            <summary>
            The time of the last hit
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPVisitBaseClass.LoginAttempts">
            <summary>
            Return the number of login attempts
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPVisitBaseClass.Name">
            <summary>
            Return the name of the visit
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPVisitBaseClass.Pages">
            <summary>
            Return the number of hits to the application
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPVisitBaseClass.Referer">
            <summary>
            Return the referer for the visit
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.SetProperty(System.String,System.String)">
            <summary>
            Set a text value for the visit
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.SetProperty(System.String,System.String,System.Int32)">
            <summary>
            Set a property value for the visit for a specific visit
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="targetVisitId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.SetProperty(System.String,System.Int32)">
            <summary>
            Set a property value for the current visit
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.SetProperty(System.String,System.Int32,System.Int32)">
            <summary>
            Set a property value for a specific visit
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="targetVisitId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.SetProperty(System.String,System.Double)">
            <summary>
            Set a property value for the current visit
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.SetProperty(System.String,System.Double,System.Int32)">
            <summary>
            Set a property value for a specific visit
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="targetVisitId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.SetProperty(System.String,System.DateTime)">
            <summary>
            Set a property value for the current visit
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.SetProperty(System.String,System.DateTime,System.Int32)">
            <summary>
            Set a property value for a specific visit
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="targetVisitId"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.SetProperty(System.String,System.Boolean)">
            <summary>
            Set a property value for the current visit
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitBaseClass.SetProperty(System.String,System.Boolean,System.Int32)">
            <summary>
            Set a property value for a specific visit
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="targetVisitId"></param>
        </member>
        <member name="P:Contensive.BaseClasses.CPVisitBaseClass.StartDateValue">
            <summary>
            The date when the visit started
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPVisitBaseClass.StartTime">
            <summary>
            The time when the visit started
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.ClearProperty(System.String)">
            <summary>
            remove the property
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetText(System.String,System.String)">
            <summary>
            return the visitor property from its key. If missing, set and return the defaultValue.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetText(System.String)">
            <summary>
            return the visitor property from its key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetBoolean(System.String,System.Boolean)">
            <summary>
            return the visitor property from its key. If missing, set and return the defaultValue.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetBoolean(System.String)">
            <summary>
            return the visitor property from its key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetDate(System.String,System.DateTime)">
            <summary>
            return the visitor property from its key. If missing, set and return the defaultValue.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetDate(System.String)">
            <summary>
            return the visitor property from its key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetObject``1(System.String)">
            <summary>
            Return the user property for the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetInteger(System.String,System.Int32)">
            <summary>
            return the visitor property from its key. If missing, set and return the defaultValue.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetInteger(System.String)">
            <summary>
            return the visitor property from its key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetNumber(System.String,System.Double)">
            <summary>
            return the visitor property from its key. If missing, set and return the defaultValue.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetNumber(System.String)">
            <summary>
            return the visitor property from its key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPVisitorBaseClass.Id">
            <summary>
            return the visitor id
            </summary>
        </member>
        <member name="P:Contensive.BaseClasses.CPVisitorBaseClass.IsNew">
            <summary>
             return true if this is a new visitor
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.SetProperty(System.String,System.String)">
            <summary>
            Set property value for this visitor
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.SetProperty(System.String,System.String,System.Int32)">
            <summary>
            Set property value for a specific visitor
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="targetVisitorid"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.SetProperty(System.String,System.Boolean)">
            <summary>
            Set the key value for this visitor
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.SetProperty(System.String,System.Boolean,System.Int32)">
            <summary>
            Set property value for a specific visitor
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="targetVisitorid"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.SetProperty(System.String,System.Int32)">
            <summary>
            Set the key value for this visitor
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.SetProperty(System.String,System.Int32,System.Int32)">
            <summary>
            Set property value for a specific visitor
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="targetVisitorid"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.SetProperty(System.String,System.Double)">
            <summary>
            Set the key value for this visitor
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.SetProperty(System.String,System.Double,System.Int32)">
            <summary>
            Set property value for a specific visitor
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="targetVisitorid"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.SetProperty(System.String,System.DateTime)">
            <summary>
            Set the key value for this visitor
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.SetProperty(System.String,System.DateTime,System.Int32)">
            <summary>
            Set property value for a specific visitor
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="targetVisitorid"></param>
        </member>
        <member name="P:Contensive.BaseClasses.CPVisitorBaseClass.UserId">
            <summary>
            return the id of the last user authenticated to this visitor
            </summary>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetProperty(System.String,System.String,System.Int32)">
            <summary>
            Use the Get that returns the appropriate defaultvalue type.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <param name="targetVisitorId"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetProperty(System.String,System.String)">
            <summary>
            Use the Get that returns the appropriate defaultvalue type.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetProperty(System.String)">
            <summary>
            Use the Get that returns the appropriate defaultvalue type.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetBoolean(System.String,System.String)">
            <summary>
            Use the Get that returns the appropriate defaultvalue type.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetDate(System.String,System.String)">
            <summary>
            Use the Get that returns the appropriate defaultvalue type.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetInteger(System.String,System.String)">
            <summary>
            Use the Get that returns the appropriate defaultvalue type.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Contensive.BaseClasses.CPVisitorBaseClass.GetNumber(System.String,System.String)">
            <summary>
            Use the Get that returns the appropriate defaultvalue type.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="P:Contensive.BaseClasses.CPVisitorBaseClass.ForceBrowserMobile">
            <summary>
            set the visit property to force the mobile state true
            </summary>
        </member>
        <member name="T:Contensive.BaseModels.AppConfigBaseModel">
            <summary>
            Configuration of an application
            - new() - to allow deserialization (so all methods must pass in cp)
            - shared getObject( cp, id ) - returns loaded model
            - saveObject( cp ) - saves instance properties, returns the record id
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.name">
            <summary>
            name for the app. Must be unique within the server group. Difficulate to change later.
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.appStatus">
            <summary>
            status used to signal that the app is ok. See AppStatusEnum for values
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.enabled">
            <summary>
            when false, app throws exception
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.privateKey">
            <summary>
            key used for all encoding, two=way and one-way encoding. 
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.privateKeyFallBack">
            <summary>
            if the privateKey decoding fails and this key is not blank, an attempt is made with this key on reads.
            When changing keys, put the old key here. For two-way encoding, read will use fallback, and written back primary.
            For one-way, if primary fails, attempt secondary.
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.localWwwPath">
            <summary>
            local abs path to wwwroot. Paths end in slash. (i.e. d:\inetpub\myApp\www\)
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.localFilesPath">
            <summary>
            local file path to the content files. Paths end in slash. (i.e. d:\inetpub\myApp\files\)
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.localPrivatePath">
            <summary>
            local file path to the content files. Paths end in slash. (i.e. d:\inetpub\myApp\private\)
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.localTempPath">
            <summary>
            temp file storage, files used by just one process, scope just during rendering life. Paths end in slash. (i.e. d:\inetpub\myApp\temp\)
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.remoteWwwPath">
            <summary>
            path within AWS S3 bucket where www files are stored
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.remoteFilePath">
            <summary>
            path within AWS S3 bucket where cdn files are stored.
            in some cases (like legacy), cdnFiles are in an iis virtual folder mapped to appRoot (like /appName/files/). Some cases this is a URL (http:\\cdn.domain.com pointing to s3)
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.remotePrivatePath">
            <summary>
            path within AWS S3 bucket where private files are stored.
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.cdnFileUrl">
            <summary>
            url for cdn files (for upload files, etc). For local files is can be /appname/files/) for remote cdn, it includes protocol-host
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.allowSiteMonitor">
            <summary>
            set true to be included in server monitor testing
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.domainList">
            <summary>
            domain(s) for the app. primary domain is the first item in the list
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.adminRoute">
            <summary>
            route to admin site. The url pathpath that executes the addon site
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.defaultPage">
            <summary>
            when exeecuting iis, this is the default page.
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.deleteProtection">
            <summary>
            if true, the command line delete cannot delete this app
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.emailLimit">
            <summary>
            Emails per month. if 0 unlimited
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.memberLimit">
            <summary>
            limit to members (accounts with membership, users, ?)
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.AppConfigBaseModel.adminLimit">
            <summary>
            limit to the number of content managers
            </summary>
        </member>
        <member name="T:Contensive.BaseModels.AppConfigBaseModel.AppModeEnum">
            <summary>
            status of the app in the appConfigModel. Only applies to the app loaded in the serverstatus.appconfig
            </summary>
        </member>
        <member name="F:Contensive.BaseModels.AppConfigBaseModel.AppModeEnum.normal">
            <summary>
            app running normal
            </summary>
        </member>
        <member name="F:Contensive.BaseModels.AppConfigBaseModel.AppModeEnum.maintainence">
            <summary>
            app paused
            </summary>
        </member>
        <member name="T:Contensive.BaseModels.AppConfigBaseModel.AppStatusEnum">
            <summary>
            status of the app in the appConfigModel. Only applies to the app loaded in the serverstatus.appconfig
            </summary>
        </member>
        <member name="F:Contensive.BaseModels.AppConfigBaseModel.AppStatusEnum.ok">
            <summary>
            app status ok
            </summary>
        </member>
        <member name="F:Contensive.BaseModels.AppConfigBaseModel.AppStatusEnum.maintenance">
            <summary>
            app status not ok
            </summary>
        </member>
        <member name="T:Contensive.BaseModels.CaseInsensitiveDictionaryBaseModel`2">
            <summary>
            case insensative dictionary. Use for application lookup
            </summary>
            <typeparam name="V"></typeparam>
            <typeparam name="S"></typeparam>
        </member>
        <member name="T:Contensive.BaseModels.HttpContextBaseModel">
            <summary>
            A parameter Object for CPBaseClass constructor. Provides context from a potential server request, like a website request
            </summary>
        </member>
        <member name="T:Contensive.BaseModels.NameValueBaseModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.NameValueBaseModel.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.NameValueBaseModel.value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Contensive.BaseModels.ServerConfigBaseModel">
            <summary>
            configuration of the server (on or more apps in the serer)
            -- new() - to allow deserialization (so all methods must pass in cp)
            -- shared getObject( cp, id ) - returns loaded model
            -- saveObject( cp ) - saves instance properties, returns the record id
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.programFilesPath">
            <summary>
            full dos path to the contensive program file installation. 
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.allowTaskRunnerService">
            <summary>
            control the task runner and task scheduler for the server group
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.allowTaskSchedulerService">
            <summary>
            control the task runner and task scheduler for the server group
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.maxConcurrentTasksPerServer">
            <summary>
            control the task runner and task scheduler for the server group
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.name">
            <summary>
            name for this server group
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.enableLocalMemoryCache">
            <summary>
            If true, use local dotnet memory cache backed by filesystem
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.enableLocalFileCache">
            <summary>
            if true, used local files to cache, backing up local cache, then remote cache
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.enableRemoteCache">
            <summary>
            AWS dotnet elaticcache client wraps enyim, and provides node autodiscovery through the configuration object. this is the srver:port to the config file it uses.
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.awsElastiCacheConfigurationEndpoint">
            <summary>
            AWS dotnet elaticcache client wraps enyim, and provides node autodiscovery through the configuration object. this is the srver:port to the config file it uses.
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.enableEnyimNLog">
            <summary>
            includes NLog logging into Enyim. Leave off as it causes performance issues
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.defaultDataSourceType">
            <summary>
            datasource for the cluster (only sql support for now)
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.defaultDataSourceAddress">
            <summary>
            datasource for the cluster (only sql support for now)
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.defaultDataSourceUsername">
            <summary>
            datasource for the cluster (only sql support for now)
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.defaultDataSourcePassword">
            <summary>
            datasource for the cluster (only sql support for now)
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.defaultDataSourceSecure">
            <summary>
            If true, the connection will be forced secure
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.awsAccessKey">
            <summary>
            aws programmatic user for all services
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.awsSecretAccessKey">
            <summary>
            aws programmatic user for all services
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.awsRegionName">
            <summary>
            aws region for this server (default us-east-1)
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.isLocalFileSystem">
            <summary>
            endpoint for cluster files (not sure how it works, maybe this will be an object taht includes permissions, for now an fpo)
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.localDataDriveLetter">
            <summary>
            endpoint for cluster files (not sure how it works, maybe this will be an object taht includes permissions, for now an fpo)
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.awsBucketName">
            <summary>
            endpoint for cluster files (not sure how it works, maybe this will be an object taht includes permissions, for now an fpo)
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.awsCloudWatchLogGroup">
            <summary>
            if provided, NLog data will be sent to this CloudWatch LogGroup 
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.ServerConfigBaseModel.productionEnvironment">
            <summary>
            used by applications to enable/disable features, like ecommerce batch should only run in production, todo figure out how to expose this, add it to configuration setup
            </summary>
        </member>
        <member name="T:Contensive.BaseModels.ServerConfigBaseModel.DataSourceTypeEnum">
            <summary>
            The type of database used by the datasource
            </summary>
        </member>
        <member name="F:Contensive.BaseModels.ServerConfigBaseModel.DataSourceTypeEnum.legacy">
            <summary>
            Legacy datasource type, do not use
            </summary>
        </member>
        <member name="F:Contensive.BaseModels.ServerConfigBaseModel.DataSourceTypeEnum.sqlServer">
            <summary>
            sql server
            </summary>
        </member>
        <member name="T:Contensive.BaseModels.SimplestDataBaseModel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.SimplestDataBaseModel.id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.SimplestDataBaseModel.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.BaseModels.SimplestDataBaseModel.ccGuid">
            <summary>
            
            </summary>
        </member>
        <member name="T:Contensive.CPBase.BaseModels.HtmlAttributesA">
            <summary>
            Attributes for html form
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesA.download">
            <summary>
            Specifies that the target will be downloaded when a user clicks on the hyperlink
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesA.href">
            <summary>
            Specifies the URL of the page the link goes to
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesA.hreflang">
            <summary>
            Specifies the language of the linked document
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesA.media">
            <summary>
            Specifies what media/device the linked document is optimized for
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesA.ping">
            <summary>
            Specifies a space-separated list of URLs to which, when the link is followed, post requests with the body ping will be sent by the browser (in the background). Typically used for tracking
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesA.referrerpolicy">
            <summary>
            Specifies which referrer to send
            </summary>
        </member>
        <member name="T:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeReferrerPolicy">
            <summary>
            
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeReferrerPolicy.none">
            <summary>
            no policy
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeReferrerPolicy.no_referrer">
            <summary>
            no_referrer
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeReferrerPolicy.no_referrer_when_downgrade">
            <summary>
            no_referrer_when_downgrade
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeReferrerPolicy.origin">
            <summary>
            origin
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeReferrerPolicy.origin_when_cross_origin">
            <summary>
            origin_when_cross_origin
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeReferrerPolicy.unsafe_url">
            <summary>
            unsafe_url
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesA.rel">
            <summary>
            Specifies the relationship between the current document and the linked document
            </summary>
        </member>
        <member name="T:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel">
            <summary>
            values for html form encodetype
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel.none">
            <summary>
            rel=none
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel.alternate">
            <summary>
            rel=alternate
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel.author">
            <summary>
            rel=author
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel.bookmark">
            <summary>
            rel=bookmark
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel.external">
            <summary>
            rel=external
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel.help">
            <summary>
            rel=help
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel.license">
            <summary>
            rel=
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel.next">
            <summary>
            rel=next
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel.nofollow">
            <summary>
            rel=nofollow
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel.noreferrer">
            <summary>
            rel=noreferrer
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel.noopener">
            <summary>
            rel=noopener
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel.prev">
            <summary>
            rel=prev
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel.search">
            <summary>
            rel=search
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesA.HtmlAttributeRel.tag">
            <summary>
            rel=tag
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesA.target">
            <summary>
            Specifies where to open the linked document
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesA.type">
            <summary>
            Specifies the media type of the linked document
            </summary>
        </member>
        <member name="T:Contensive.CPBase.BaseModels.HtmlAttributesForm">
            <summary>
            Attributes for html form
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesForm.acceptcharset">
            <summary>
            Specifies the character encodings that are to be used for the form submission. A space-separated list of one or more character encodings that are to be used for the form submission.
            Common values: UTF-8 - Character encoding for Unicode, ISO-8859-1 - Character encoding for the Latin alphabet.
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesForm.action">
            <summary>
            Specifies where to send the form-data when a form is submitted
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesForm.autocomplete">
            <summary>
            Specifies whether a form should have autocomplete on or off
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesForm.enctype">
            <summary>
            Specifies how the form-data should be encoded when submitting it to the server (only for method="post")
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesForm.method">
            <summary>
            Specifies the HTTP method to use when sending form-data
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesForm.name">
            <summary>
            Specifies the name of a form
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesForm.novalidate">
            <summary>
            Specifies that the form should not be validated when submitted
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesForm.target">
            <summary>
            Specifies where to display the response that is received after submitting the form
            </summary>
        </member>
        <member name="T:Contensive.CPBase.BaseModels.HtmlAttributesForm.HtmlAttributeTarget">
            <summary>
            possible values for html attribute target
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesForm.HtmlAttributeTarget.none">
            <summary>
            
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesForm.HtmlAttributeTarget._blank">
            <summary>
            
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesForm.HtmlAttributeTarget._self">
            <summary>
            
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesForm.HtmlAttributeTarget._parent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesForm.HtmlAttributeTarget._top">
            <summary>
            
            </summary>
        </member>
        <member name="T:Contensive.CPBase.BaseModels.HtmlAttributesForm.HtmlEncTypeEnum">
            <summary>
            values for html form encodetype
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesForm.HtmlEncTypeEnum.none">
            <summary>
            
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesForm.HtmlEncTypeEnum.application_x_www_form_urlencoded">
            <summary>
            
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesForm.HtmlEncTypeEnum.multipart_form_data">
            <summary>
            
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesForm.HtmlEncTypeEnum.text_plain">
            <summary>
            
            </summary>
        </member>
        <member name="T:Contensive.CPBase.BaseModels.HtmlAttributesForm.HtmlMethodEnum">
            <summary>
            values for html form method
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesForm.HtmlMethodEnum.post">
            <summary>
            
            </summary>
        </member>
        <member name="F:Contensive.CPBase.BaseModels.HtmlAttributesForm.HtmlMethodEnum.get">
            <summary>
            
            </summary>
        </member>
        <member name="T:Contensive.CPBase.BaseModels.HtmlAttributesGlobal">
            <summary>
            Attributes avalable for all html5 elements
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.accesskey">
            <summary>
            Specifies a shortcut key to activate/focus an element
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.class">
            <summary>
            Specifies one or more classnames for an element (refers to a class in a style sheet)
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.contenteditable">
            <summary>
            Specifies whether the content of an element is editable or not
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.data">
            <summary>
            Used to store custom data private to the page or application
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.dir">
            <summary>
            Specifies the text direction for the content in an element
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.draggable">
            <summary>
            Specifies whether an element is draggable or not
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.dropzone">
            <summary>
            Specifies whether the dragged data is copied, moved, or linked, when dropped
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.hidden">
            <summary>
            Specifies that an element is not yet, or is no longer, relevant
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.id">
            <summary>
            Specifies a unique id for an element
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.lang">
            <summary>
            Specifies the language of the element's content
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.spellcheck">
            <summary>
            Specifies whether the element is to have its spelling and grammar checked or not
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.style">
            <summary>
            Specifies an inline CSS style for an element
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.tabindex">
            <summary>
            Specifies the tabbing order of an element
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.title">
            <summary>
            Specifies extra information about an element
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.translate">
            <summary>
            Specifies whether the content of an element should be translated or not
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.oncopy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.oncut">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onpaste">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.ondrag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.ondragend">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.ondragenter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.ondragleave">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.ondragover">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.ondragstart">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.ondrop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onscroll">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onblur">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onchange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.oncontextmenu">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onfocus">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.oninput">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.oninvalid">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onreset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onsearch">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onselect">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onsubmit">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onafterprint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onbeforeprint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onbeforeunload">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onerror">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onhashchange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onload">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onmessage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onoffline">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.ononline">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onpagehide">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onpageshow">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onpopstate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onresize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onstorage">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onunload">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onkeydown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onkeypress">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onkeyup">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onabort">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.oncanplay">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.oncanplaythrough">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.oncuechange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.ondurationchange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onemptied">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onended">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onloadeddata">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onloadedmetadata">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onloadstart">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onpause">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onplay">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onplaying">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onprogress">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onratechange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onseeked">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onseeking">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onstalled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onsuspend">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.ontimeupdate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onvolumechange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onwaiting">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.ondblclick">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onmousedown">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onmousemove">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onmouseout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onmouseover">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onmouseup">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onmousewheel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Contensive.CPBase.BaseModels.HtmlAttributesGlobal.onwheel">
            <summary>
            
            </summary>
        </member>
        <member name="T:Contensive.CPBase.BaseModels.LastestDateTrackerBaseModel">
            <summary>
            Track a series of dates, saving only the latest
            </summary>
        </member>
        <member name="M:Contensive.CPBase.BaseModels.LastestDateTrackerBaseModel.Reset">
            <summary>
            Reset the Modified Date. Call before tracking the modified date.
            </summary>
        </member>
        <member name="M:Contensive.CPBase.BaseModels.LastestDateTrackerBaseModel.Track(System.Nullable{System.DateTime})">
            <summary>
            include this modified date and save if it is the latest
            </summary>
            <param name="ModifiedDate"></param>
        </member>
        <member name="M:Contensive.CPBase.BaseModels.LastestDateTrackerBaseModel.Get">
            <summary>
            Get the latest date added to the tracker since the last reset
            </summary>
            <returns></returns>
        </member>
        <member name="T:Contensive.Exceptions.GenericException">
            <summary>
            Non-specific exception. Used during code conversion. Do not add to future code.
            </summary>
        </member>
        <member name="M:Contensive.Exceptions.GenericException.#ctor(System.String)">
            <summary>
            Raise generic exception
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Contensive.Exceptions.GenericException.#ctor(System.String,System.Exception)">
            <summary>
            Raise generic exception
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Contensive.Exceptions.GenericException.#ctor">
            <summary>
            Raise generic exception
            </summary>
        </member>
        <member name="M:Contensive.Exceptions.GenericException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Raise generic exception
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
    </members>
</doc>
